!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AF_LOCAL	hiredis/net.h	39;"	d
BINDIR	Makefile	/^BINDIR = $(WORKDIR)\/bin$/;"	m
BINS	hiredis/Makefile	/^BINS=hiredis-example hiredis-test$/;"	m
CC	Makefile	/^CC = g++$/;"	m
CC	hiredis/Makefile	/^CC:=$(shell sh -c 'type $(CC) >\/dev\/null 2>\/dev\/null && echo $(CC) || echo gcc')$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -fPIC -ggdb  \\$/;"	m
CONN_DETECT	conn_manager.cpp	6;"	d	file:
CONN_MGR	conn_manager.h	205;"	d
CONN_REDIS_TIMEOUT	hiredis_manager.h	7;"	d
CONN_TCP	hiredis/test.c	/^    CONN_TCP,$/;"	e	enum:connection_type	file:
CONN_UNIX	hiredis/test.c	/^    CONN_UNIX$/;"	e	enum:connection_type	file:
CmdProcessorInterface	cmd_processor_interface.h	/^class CmdProcessorInterface$/;"	c
DEBUG	hiredis/Makefile	/^DEBUG?= -g -ggdb$/;"	m
DICT_ERR	hiredis/dict.h	40;"	d
DICT_HT_INITIAL_SIZE	hiredis/dict.h	76;"	d
DICT_NOTUSED	hiredis/dict.h	43;"	d
DICT_OK	hiredis/dict.h	39;"	d
DYLIBNAME	hiredis/Makefile	/^DYLIBNAME=$(LIBNAME).$(DYLIBSUFFIX)$/;"	m
DYLIBSUFFIX	hiredis/Makefile	/^  DYLIBSUFFIX=dylib$/;"	m
DYLIBSUFFIX	hiredis/Makefile	/^DYLIBSUFFIX=so$/;"	m
DYLIB_MAJOR_NAME	hiredis/Makefile	/^  DYLIB_MAJOR_NAME=$(LIBNAME).$(HIREDIS_MAJOR).$(DYLIBSUFFIX)$/;"	m
DYLIB_MAJOR_NAME	hiredis/Makefile	/^DYLIB_MAJOR_NAME=$(LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_MAJOR)$/;"	m
DYLIB_MAKE_CMD	hiredis/Makefile	/^  DYLIB_MAKE_CMD=$(CC) -G -o $(DYLIBNAME) -h $(DYLIB_MINOR_NAME) $(LDFLAGS)$/;"	m
DYLIB_MAKE_CMD	hiredis/Makefile	/^  DYLIB_MAKE_CMD=$(CC) -shared -Wl,-install_name,$(DYLIB_MINOR_NAME) -o $(DYLIBNAME) $(LDFLAGS)$/;"	m
DYLIB_MAKE_CMD	hiredis/Makefile	/^DYLIB_MAKE_CMD=$(CC) -shared -Wl,-soname,$(DYLIB_MINOR_NAME) -o $(DYLIBNAME) $(LDFLAGS)$/;"	m
DYLIB_MINOR_NAME	hiredis/Makefile	/^  DYLIB_MINOR_NAME=$(LIBNAME).$(HIREDIS_MAJOR).$(HIREDIS_MINOR).$(DYLIBSUFFIX)$/;"	m
DYLIB_MINOR_NAME	hiredis/Makefile	/^DYLIB_MINOR_NAME=$(LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_MAJOR).$(HIREDIS_MINOR)$/;"	m
FLOAT_WIDTH_TEST	hiredis/test.c	160;"	d	file:
FOREACH	macro_utils.h	4;"	d
FOREACH_NOINCR_ITER	macro_utils.h	10;"	d
GetPlayerBaseCacheCmdProcessor	cache_processor.h	/^class GetPlayerBaseCacheCmdProcessor : public CmdProcessorInterface$/;"	c
GetPlayerBaseInfoCmdProcessor	cache_processor.h	/^class GetPlayerBaseInfoCmdProcessor : public CmdProcessorInterface$/;"	c
HEADERS	Makefile	/^HEADERS = $(wildcard $(INCLUDEDIR)\/*.h)$/;"	m
HIREDIS_MAJOR	hiredis/Makefile	/^HIREDIS_MAJOR=0$/;"	m
HIREDIS_MAJOR	hiredis/hiredis.h	38;"	d
HIREDIS_MGR	hiredis_manager.h	27;"	d
HIREDIS_MINOR	hiredis/Makefile	/^HIREDIS_MINOR=10$/;"	m
HIREDIS_MINOR	hiredis/hiredis.h	39;"	d
HIREDIS_PATCH	hiredis/hiredis.h	40;"	d
INCLUDEDIR	Makefile	/^INCLUDEDIR = $(WORKDIR)\/src$/;"	m
INCLUDE_PATH	hiredis/Makefile	/^INCLUDE_PATH?=include\/hiredis$/;"	m
INSTALL	hiredis/Makefile	/^  INSTALL= cp -r$/;"	m
INSTALL	hiredis/Makefile	/^  INSTALL?= cp -r$/;"	m
INSTALL	hiredis/Makefile	/^INSTALL?= cp -a$/;"	m
INSTALL_INCLUDE_PATH	hiredis/Makefile	/^INSTALL_INCLUDE_PATH= $(PREFIX)\/$(INCLUDE_PATH)$/;"	m
INSTALL_LIBRARY_PATH	hiredis/Makefile	/^INSTALL_LIBRARY_PATH= $(PREFIX)\/$(LIBRARY_PATH)$/;"	m
INTEGER_WIDTH_TEST	hiredis/test.c	151;"	d	file:
LFLAGS	Makefile	/^LFLAGS = -Wall -Werror -ggdb \\$/;"	m
LIBDIR	Makefile	/^LIBDIR = $(WORKDIR)\/lib$/;"	m
LIBNAME	hiredis/Makefile	/^LIBNAME=libhiredis$/;"	m
LIBRARY_PATH	hiredis/Makefile	/^LIBRARY_PATH?=lib$/;"	m
LIB_CACHE_DIR	Makefile	/^LIB_CACHE_DIR = $(PROTODIR)\/cache$/;"	m
LIB_CACHE_MAKEFILE_DIR	Makefile	/^LIB_CACHE_MAKEFILE_DIR = $(LIB_CACHE_DIR)\/define$/;"	m
LIB_CACHE_PROTO	Makefile	/^LIB_CACHE_PROTO = $(LIB_CACHE_DIR)\/libcacheproto.a$/;"	m
LIB_DB_DIR	Makefile	/^LIB_DB_DIR = $(PROTODIR)\/db$/;"	m
LIB_DB_MAKEFILE_DIR	Makefile	/^LIB_DB_MAKEFILE_DIR = $(LIB_DB_DIR)\/define$/;"	m
LIB_DB_PROTO	Makefile	/^LIB_DB_PROTO = $(LIB_DB_DIR)\/libdbproto.a$/;"	m
LIB_REDIS	Makefile	/^LIB_REDIS = .\/hiredis\/libhiredis.a$/;"	m
NOW	macro_utils.h	17;"	d
OBJ	hiredis/Makefile	/^OBJ=net.o hiredis.o sds.o async.o$/;"	m
OBJDIR	Makefile	/^OBJDIR = $(WORKDIR)\/obj$/;"	m
OBJS	Makefile	/^OBJS := $(patsubst %.cpp,%.o,$(subst $(SRCDIR),$(OBJDIR),$(SRCS)))$/;"	m
OPTIMIZATION	hiredis/Makefile	/^OPTIMIZATION?=-O3$/;"	m
PREFIX	hiredis/Makefile	/^PREFIX?=\/usr\/local$/;"	m
PROTOBUF_CFLAGS	Makefile	/^PROTOBUF_CFLAGS = $(shell pkg-config --cflags protobuf)$/;"	m
PROTOBUF_LFLAGS	Makefile	/^PROTOBUF_LFLAGS = $(shell pkg-config --libs protobuf)$/;"	m
PROTODIR	Makefile	/^PROTODIR = $(WORKDIR)\/..\/proto$/;"	m
PROTO_FROM_CLIENT	proto_processor.h	/^    PROTO_FROM_CLIENT = 0,$/;"	e	enum:__anon5
PROTO_FROM_SERV	proto_processor.h	/^    PROTO_FROM_SERV = 1,$/;"	e	enum:__anon5
PROTO_H	proto.h	2;"	d
ProtoProcessor	proto_processor.cpp	/^ProtoProcessor::ProtoProcessor()$/;"	f	class:ProtoProcessor
ProtoProcessor	proto_processor.h	/^class ProtoProcessor$/;"	c
REAL_CFLAGS	hiredis/Makefile	/^REAL_CFLAGS=$(OPTIMIZATION) -fPIC $(CFLAGS) $(WARNINGS) $(DEBUG) $(ARCH)$/;"	m
REAL_LDFLAGS	hiredis/Makefile	/^REAL_LDFLAGS=$(LDFLAGS) $(ARCH)$/;"	m
REDIS_BLOCK	hiredis/hiredis.h	57;"	d
REDIS_CONNECTED	hiredis/hiredis.h	61;"	d
REDIS_DISCONNECTING	hiredis/hiredis.h	67;"	d
REDIS_ERR	hiredis/hiredis.h	42;"	d
REDIS_ERR_EOF	hiredis/hiredis.h	50;"	d
REDIS_ERR_IO	hiredis/hiredis.h	49;"	d
REDIS_ERR_OOM	hiredis/hiredis.h	52;"	d
REDIS_ERR_OTHER	hiredis/hiredis.h	53;"	d
REDIS_ERR_PROTOCOL	hiredis/hiredis.h	51;"	d
REDIS_FREEING	hiredis/hiredis.h	71;"	d
REDIS_IN_CALLBACK	hiredis/hiredis.h	74;"	d
REDIS_MONITORING	hiredis/hiredis.h	80;"	d
REDIS_OK	hiredis/hiredis.h	43;"	d
REDIS_READER_MAX_BUF	hiredis/hiredis.h	89;"	d
REDIS_REPLY_ARRAY	hiredis/hiredis.h	83;"	d
REDIS_REPLY_ERROR	hiredis/hiredis.h	87;"	d
REDIS_REPLY_INTEGER	hiredis/hiredis.h	84;"	d
REDIS_REPLY_NIL	hiredis/hiredis.h	85;"	d
REDIS_REPLY_STATUS	hiredis/hiredis.h	86;"	d
REDIS_REPLY_STRING	hiredis/hiredis.h	82;"	d
REDIS_SUBSCRIBED	hiredis/hiredis.h	77;"	d
REGISTER_TIMER_TYPE	timer_procs.cpp	6;"	d	file:
REVERSE_FOREACH	macro_utils.h	7;"	d
REVERSE_FOREACH_NOINCR_ITER	macro_utils.h	13;"	d
SRCDIR	Makefile	/^SRCDIR = $(WORKDIR)\/src$/;"	m
SRCS	Makefile	/^SRCS = $(wildcard $(SRCDIR)\/*.cpp)$/;"	m
STLIBNAME	hiredis/Makefile	/^STLIBNAME=$(LIBNAME).$(STLIBSUFFIX)$/;"	m
STLIBSUFFIX	hiredis/Makefile	/^STLIBSUFFIX=a$/;"	m
STLIB_MAKE_CMD	hiredis/Makefile	/^STLIB_MAKE_CMD=ar rcs $(STLIBNAME)$/;"	m
Service	service.cpp	/^Service::Service(const std::string& service_name)$/;"	f	class:Service
Service	service.h	/^class Service$/;"	c
SqlDB	singleton.h	/^typedef singleton_default<SqlDB_t> SqlDB;$/;"	t
SqlDB_t	singleton.h	/^class SqlDB_t  $/;"	c
StopWaiting	timer_procs.cpp	/^int StopWaiting(void* owner, void* data)$/;"	f
TARGET	Makefile	/^TARGET = $(BINDIR)\/libcache_svr.so$/;"	m
WARNINGS	hiredis/Makefile	/^WARNINGS=-Wall -W -Wstrict-prototypes -Wwrite-strings$/;"	m
WORKDIR	Makefile	/^WORKDIR = ..\/$/;"	m
_BSD_SOURCE	hiredis/fmacros.h	5;"	d
_EL_ADD_READ	hiredis/async.c	44;"	d	file:
_EL_ADD_WRITE	hiredis/async.c	50;"	d	file:
_EL_CLEANUP	hiredis/async.c	56;"	d	file:
_EL_DEL_READ	hiredis/async.c	47;"	d	file:
_EL_DEL_WRITE	hiredis/async.c	53;"	d	file:
_POSIX_C_SOURCE	hiredis/fmacros.h	9;"	d
_XOPEN_SOURCE	hiredis/fmacros.h	11;"	d
_XOPEN_SOURCE	hiredis/fmacros.h	13;"	d
__CACHE_PROCESSOR_H__	cache_processor.h	2;"	d
__CMD_PROCESSOR_INTERFACE_H__	cmd_processor_interface.h	2;"	d
__COMMON_H__	common.h	2;"	d
__CONN_MANAGER_H__	conn_manager.h	2;"	d
__DICT_H	hiredis/dict.h	37;"	d
__HIREDIS_AE_H__	hiredis/adapters/ae.h	2;"	d
__HIREDIS_ASYNC_H	hiredis/async.h	33;"	d
__HIREDIS_FMACRO_H	hiredis/fmacros.h	2;"	d
__HIREDIS_H	hiredis/hiredis.h	33;"	d
__HIREDIS_LIBEVENT_H__	hiredis/adapters/libevent.h	2;"	d
__HIREDIS_LIBEV_H__	hiredis/adapters/libev.h	2;"	d
__HIREDIS_MANAGER_H__	hiredis_manager.h	2;"	d
__MACRO_UTILS_H__	macro_utils.h	2;"	d
__MAX_MSEC	hiredis/net.c	126;"	d	file:
__NET_H	hiredis/net.h	34;"	d
__PROTO_PROCESSOR_H__	proto_processor.h	2;"	d
__SDS_H	hiredis/sds.h	32;"	d
__SERVICE_H__	service.h	2;"	d
__SINGLETON_H__	singleton.h	2;"	d
__TIMER_PROCS_H__	timer_procs.h	2;"	d
__failed_tests	hiredis/sds.c	/^int __failed_tests = 0;$/;"	v
__redisAppendCommand	hiredis/hiredis.c	/^int __redisAppendCommand(redisContext *c, char *cmd, size_t len) {$/;"	f
__redisAsyncCommand	hiredis/async.c	/^static int __redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, char *cmd, size_t len) {$/;"	f	file:
__redisAsyncCopyError	hiredis/async.c	/^static void __redisAsyncCopyError(redisAsyncContext *ac) {$/;"	f	file:
__redisAsyncDisconnect	hiredis/async.c	/^static void __redisAsyncDisconnect(redisAsyncContext *ac) {$/;"	f	file:
__redisAsyncFree	hiredis/async.c	/^static void __redisAsyncFree(redisAsyncContext *ac) {$/;"	f	file:
__redisAsyncHandleConnect	hiredis/async.c	/^static int __redisAsyncHandleConnect(redisAsyncContext *ac) {$/;"	f	file:
__redisBlockForReply	hiredis/hiredis.c	/^static void *__redisBlockForReply(redisContext *c) {$/;"	f	file:
__redisGetSubscribeCallback	hiredis/async.c	/^static int __redisGetSubscribeCallback(redisAsyncContext *ac, redisReply *reply, redisCallback *dstcb) {$/;"	f	file:
__redisPushCallback	hiredis/async.c	/^static int __redisPushCallback(redisCallbackList *list, redisCallback *source) {$/;"	f	file:
__redisReaderSetError	hiredis/hiredis.c	/^static void __redisReaderSetError(redisReader *r, int type, const char *str) {$/;"	f	file:
__redisReaderSetErrorOOM	hiredis/hiredis.c	/^static void __redisReaderSetErrorOOM(redisReader *r) {$/;"	f	file:
__redisReaderSetErrorProtocolByte	hiredis/hiredis.c	/^static void __redisReaderSetErrorProtocolByte(redisReader *r, char byte) {$/;"	f	file:
__redisRunCallback	hiredis/async.c	/^static void __redisRunCallback(redisAsyncContext *ac, redisCallback *cb, redisReply *reply) {$/;"	f	file:
__redisSetError	hiredis/hiredis.c	/^void __redisSetError(redisContext *c, int type, const char *str) {$/;"	f
__redisSetErrorFromErrno	hiredis/net.c	/^static void __redisSetErrorFromErrno(redisContext *c, int type, const char *prefix) {$/;"	f	file:
__redisShiftCallback	hiredis/async.c	/^static int __redisShiftCallback(redisCallbackList *list, redisCallback *target) {$/;"	f	file:
__test_num	hiredis/sds.c	/^int __test_num = 0;$/;"	v
_dictClear	hiredis/dict.c	/^static int _dictClear(dict *ht) {$/;"	f	file:
_dictExpandIfNeeded	hiredis/dict.c	/^static int _dictExpandIfNeeded(dict *ht) {$/;"	f	file:
_dictInit	hiredis/dict.c	/^static int _dictInit(dict *ht, dictType *type, void *privDataPtr) {$/;"	f	file:
_dictKeyIndex	hiredis/dict.c	/^static int _dictKeyIndex(dict *ht, const void *key) {$/;"	f	file:
_dictNextPower	hiredis/dict.c	/^static unsigned long _dictNextPower(unsigned long size) {$/;"	f	file:
_dictReset	hiredis/dict.c	/^static void _dictReset(dict *ht) {$/;"	f	file:
addRead	hiredis/async.h	/^        void (*addRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon1
addWrite	hiredis/async.h	/^        void (*addWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon1
add_to_wait_map	conn_manager.h	/^    inline void add_to_wait_map(conn_info_t &conn) {$/;"	f	class:conn_manager_t
buf	hiredis/hiredis.h	/^    char *buf; \/* Read buffer *\/$/;"	m	struct:redisReader
buf	hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr
bulklen	hiredis/hiredis.c	/^static size_t bulklen(size_t len) {$/;"	f	file:
c	hiredis/async.h	/^    redisContext c;$/;"	m	struct:redisAsyncContext
callbackDict	hiredis/async.c	/^static dictType callbackDict = {$/;"	v	file:
callbackHash	hiredis/async.c	/^static unsigned int callbackHash(const void *key) {$/;"	f	file:
callbackKeyCompare	hiredis/async.c	/^static int callbackKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f	file:
callbackKeyDestructor	hiredis/async.c	/^static void callbackKeyDestructor(void *privdata, void *key) {$/;"	f	file:
callbackValDestructor	hiredis/async.c	/^static void callbackValDestructor(void *privdata, void *val) {$/;"	f	file:
callbackValDup	hiredis/async.c	/^static void *callbackValDup(void *privdata, const void *src) {$/;"	f	file:
channels	hiredis/async.h	/^        struct dict *channels;$/;"	m	struct:redisAsyncContext::__anon2	typeref:struct:redisAsyncContext::__anon2::dict
chrtos	hiredis/hiredis.c	/^static size_t chrtos(char *buf, size_t size, char byte) {$/;"	f	file:
clean_expire_conn	conn_manager.h	/^    inline void clean_expire_conn(conn_info_t *conn) {$/;"	f	class:conn_manager_t
cleanup	hiredis/async.h	/^        void (*cleanup)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon1
close	service.cpp	/^int Service::close()$/;"	f	class:Service
cmd	proto.h	/^    uint16_t cmd;$/;"	m	struct:db_proto_header_t
cmd_map_iter_t	conn_manager.h	/^    typedef std::map<uint32_t, std::set<conn_info_t*> >::iterator cmd_map_iter_t;$/;"	t	class:conn_manager_t
cmd_map_t	conn_manager.h	/^    typedef std::map<uint32_t, std::set<conn_info_t*> > cmd_map_t;$/;"	t	class:conn_manager_t
cmd_processors_	proto_processor.h	/^    std::map<uint32_t, CmdProcessorInterface*> cmd_processors_;$/;"	m	class:ProtoProcessor
config	hiredis/test.c	/^struct config {$/;"	s	file:
conn_info_t	conn_manager.h	/^    conn_info_t() {$/;"	f	struct:conn_info_t
conn_info_t	conn_manager.h	/^struct conn_info_t {$/;"	s
conn_manager_singleton_t	conn_manager.h	/^typedef singleton_default<conn_manager_t> conn_manager_singleton_t;$/;"	t
conn_manager_t	conn_manager.h	/^    conn_manager_t() { $/;"	f	class:conn_manager_t
conn_manager_t	conn_manager.h	/^class conn_manager_t {$/;"	c
connect	hiredis/test.c	/^static redisContext *connect(struct config config) {$/;"	f	file:
connect	service.cpp	/^int Service::connect()$/;"	f	class:Service
connect	singleton.h	/^	void connect() { cout << "connect db" << endl; }$/;"	f	class:SqlDB_t
connectCallback	hiredis/example-ae.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	hiredis/example-libev.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	hiredis/example-libevent.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connection_type	hiredis/test.c	/^enum connection_type {$/;"	g	file:
context	hiredis/adapters/ae.h	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents
context	hiredis/adapters/libev.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibevEvents
context	hiredis/adapters/libevent.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibeventEvents
createArray	hiredis/hiredis.h	/^    void *(*createArray)(const redisReadTask*, int);$/;"	m	struct:redisReplyObjectFunctions
createArrayObject	hiredis/hiredis.c	/^static void *createArrayObject(const redisReadTask *task, int elements) {$/;"	f	file:
createInteger	hiredis/hiredis.h	/^    void *(*createInteger)(const redisReadTask*, long long);$/;"	m	struct:redisReplyObjectFunctions
createIntegerObject	hiredis/hiredis.c	/^static void *createIntegerObject(const redisReadTask *task, long long value) {$/;"	f	file:
createNil	hiredis/hiredis.h	/^    void *(*createNil)(const redisReadTask*);$/;"	m	struct:redisReplyObjectFunctions
createNilObject	hiredis/hiredis.c	/^static void *createNilObject(const redisReadTask *task) {$/;"	f	file:
createReplyObject	hiredis/hiredis.c	/^static redisReply *createReplyObject(int type) {$/;"	f	file:
createString	hiredis/hiredis.h	/^    void *(*createString)(const redisReadTask*, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions
createStringObject	hiredis/hiredis.c	/^static void *createStringObject(const redisReadTask *task, char *str, size_t len) {$/;"	f	file:
create_new_conn	conn_manager.h	/^    inline conn_info_t *create_new_conn(fdsession_t *fdsess, uint32_t wait_uid, uint32_t cmd, $/;"	f	class:conn_manager_t
create_object	singleton.h	/^	static object_creator create_object;$/;"	m	struct:singleton_default
create_object	singleton.h	/^singleton_default<T>::create_object;$/;"	m	class:singleton_default
cur_seq	conn_manager.h	/^    uint32_t cur_seq;$/;"	m	struct:conn_info_t
data	hiredis/async.h	/^        void *data;$/;"	m	struct:redisAsyncContext::__anon1
data	hiredis/async.h	/^    void *data;$/;"	m	struct:redisAsyncContext
db_proto_header_t	proto.h	/^struct db_proto_header_t$/;"	s
defaultFunctions	hiredis/hiredis.c	/^static redisReplyObjectFunctions defaultFunctions = {$/;"	v	file:
delRead	hiredis/async.h	/^        void (*delRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon1
delWrite	hiredis/async.h	/^        void (*delWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon1
del_conn_when_fd_closed	conn_manager.h	/^    inline void del_conn_when_fd_closed(int fd) {$/;"	f	class:conn_manager_t
del_from_wait_map	conn_manager.h	/^    inline void del_from_wait_map(uint32_t uid, uint32_t cmd, $/;"	f	class:conn_manager_t
delete_conn	conn_manager.h	/^    inline void delete_conn(conn_info_t **conn) {$/;"	f	class:conn_manager_t
dict	hiredis/dict.h	/^typedef struct dict {$/;"	s
dict	hiredis/dict.h	/^} dict;$/;"	t	typeref:struct:dict
dictAdd	hiredis/dict.c	/^static int dictAdd(dict *ht, void *key, void *val) {$/;"	f	file:
dictCompareHashKeys	hiredis/dict.h	101;"	d
dictCreate	hiredis/dict.c	/^static dict *dictCreate(dictType *type, void *privDataPtr) {$/;"	f	file:
dictDelete	hiredis/dict.c	/^static int dictDelete(dict *ht, const void *key) {$/;"	f	file:
dictEntry	hiredis/dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	hiredis/dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictExpand	hiredis/dict.c	/^static int dictExpand(dict *ht, unsigned long size) {$/;"	f	file:
dictFind	hiredis/dict.c	/^static dictEntry *dictFind(dict *ht, const void *key) {$/;"	f	file:
dictFreeEntryKey	hiredis/dict.h	90;"	d
dictFreeEntryVal	hiredis/dict.h	79;"	d
dictGenHashFunction	hiredis/dict.c	/^static unsigned int dictGenHashFunction(const unsigned char *buf, int len) {$/;"	f	file:
dictGetEntryKey	hiredis/dict.h	108;"	d
dictGetEntryVal	hiredis/dict.h	109;"	d
dictGetIterator	hiredis/dict.c	/^static dictIterator *dictGetIterator(dict *ht) {$/;"	f	file:
dictHashKey	hiredis/dict.h	106;"	d
dictIterator	hiredis/dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	hiredis/dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictNext	hiredis/dict.c	/^static dictEntry *dictNext(dictIterator *iter) {$/;"	f	file:
dictRelease	hiredis/dict.c	/^static void dictRelease(dict *ht) {$/;"	f	file:
dictReleaseIterator	hiredis/dict.c	/^static void dictReleaseIterator(dictIterator *iter) {$/;"	f	file:
dictReplace	hiredis/dict.c	/^static int dictReplace(dict *ht, void *key, void *val) {$/;"	f	file:
dictSetHashKey	hiredis/dict.h	94;"	d
dictSetHashVal	hiredis/dict.h	83;"	d
dictSize	hiredis/dict.h	111;"	d
dictSlots	hiredis/dict.h	110;"	d
dictType	hiredis/dict.h	/^typedef struct dictType {$/;"	s
dictType	hiredis/dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
disconnect	hiredis/test.c	/^static void disconnect(redisContext *c) {$/;"	f	file:
disconnectCallback	hiredis/example-ae.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	hiredis/example-libev.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	hiredis/example-libevent.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
do_nothing	singleton.h	/^		inline void do_nothing() const { }$/;"	f	struct:singleton_default::object_creator
element	hiredis/hiredis.h	/^    struct redisReply **element; \/* elements vector for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	typeref:struct:redisReply::redisReply
elements	hiredis/hiredis.h	/^    int elements; \/* number of elements in multibulk container *\/$/;"	m	struct:redisReadTask
elements	hiredis/hiredis.h	/^    size_t elements; \/* number of elements, for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply
entry	hiredis/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
err	hiredis/async.h	/^    int err;$/;"	m	struct:redisAsyncContext
err	hiredis/hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisContext
err	hiredis/hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisReader
errstr	hiredis/async.h	/^    char *errstr;$/;"	m	struct:redisAsyncContext
errstr	hiredis/hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisContext
errstr	hiredis/hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisReader
ev	hiredis/async.h	/^    } ev;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon1
exec	singleton.h	/^	void exec(const char *sqlstr) { cout << "exec insert\/update\/delete :" << sqlstr << endl; }$/;"	f	class:SqlDB_t
fails	hiredis/test.c	/^static int tests = 0, fails = 0;$/;"	v	file:
fd	hiredis/adapters/ae.h	/^    int fd;$/;"	m	struct:redisAeEvents
fd	hiredis/hiredis.h	/^    int fd;$/;"	m	struct:redisContext
fd	service.h	/^    inline int fd() const$/;"	f	class:Service
fd_	service.h	/^    int fd_;$/;"	m	class:Service
fdsess	conn_manager.h	/^    fdsession_t *fdsess;$/;"	m	struct:conn_info_t
fini	hiredis_manager.cpp	/^bool hiredis_manager_t::fini(void) $/;"	f	class:hiredis_manager_t
fini_service	dll_iface.cpp	/^extern "C" int  fini_service(int isparent)$/;"	f
flags	hiredis/hiredis.h	/^    int flags;$/;"	m	struct:redisContext
fn	hiredis/async.h	/^    redisCallbackFn *fn;$/;"	m	struct:redisCallback
fn	hiredis/hiredis.h	/^    redisReplyObjectFunctions *fn;$/;"	m	struct:redisReader
free	hiredis/sds.h	/^    int free;$/;"	m	struct:sdshdr
freeObject	hiredis/hiredis.h	/^    void (*freeObject)(void*);$/;"	m	struct:redisReplyObjectFunctions
freeReplyObject	hiredis/hiredis.c	/^void freeReplyObject(void *reply) {$/;"	f
g_dbproxy	service.cpp	/^Service *g_dbproxy;$/;"	v
g_proto_processor	proto_processor.cpp	/^ProtoProcessor* g_proto_processor;$/;"	v
g_reconnect_timer	timer_procs.cpp	/^timer_head_t g_reconnect_timer;$/;"	v
g_waiting_rsp_timer	timer_procs.cpp	/^timer_head_t g_waiting_rsp_timer;$/;"	v
getCallback	hiredis/example-ae.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	hiredis/example-libev.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	hiredis/example-libevent.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
get_pkg_len	dll_iface.cpp	/^extern "C" int get_pkg_len(int fd, const void* avail_data, int avail_len, int isparent)$/;"	f
get_pkg_len	proto_processor.cpp	/^int ProtoProcessor::get_pkg_len(int fd, const void* avail_data, $/;"	f	class:ProtoProcessor
get_player_info	hiredis_manager.cpp	/^bool hiredis_manager_t::get_player_info(uint32_t uid, $/;"	f	class:hiredis_manager_t
get_redis	hiredis_manager.cpp	/^redisContext* hiredis_manager_t::get_redis(void)$/;"	f	class:hiredis_manager_t
hashFunction	hiredis/dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
head	hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList
hiredis_manager_singleton_t	hiredis_manager.h	/^typedef singleton_default<hiredis_manager_t> hiredis_manager_singleton_t;$/;"	t
hiredis_manager_t	hiredis_manager.cpp	/^hiredis_manager_t::hiredis_manager_t()$/;"	f	class:hiredis_manager_t
hiredis_manager_t	hiredis_manager.h	/^class hiredis_manager_t {$/;"	c
host	hiredis/test.c	/^        const char *host;$/;"	m	struct:config::__anon3	file:
ht	hiredis/dict.h	/^    dict *ht;$/;"	m	struct:dictIterator
idx	hiredis/hiredis.h	/^    int idx; \/* index in parent (array) object *\/$/;"	m	struct:redisReadTask
in_	cache_processor.h	/^    cacheproto::cs_batch_get_users_info in_;$/;"	m	class:GetPlayerBaseCacheCmdProcessor
index	hiredis/dict.h	/^    int index;$/;"	m	struct:dictIterator
init	hiredis_manager.cpp	/^bool hiredis_manager_t::init(void) $/;"	f	class:hiredis_manager_t
init_connections	dll_iface.cpp	/^int init_connections()$/;"	f
init_processors	dll_iface.cpp	/^int init_processors()$/;"	f
init_service	dll_iface.cpp	/^extern "C" int  init_service(int isparent)$/;"	f
instance	singleton.h	/^	static object_type & instance() {$/;"	f	struct:singleton_default
integer	hiredis/hiredis.h	/^    long long integer; \/* The integer when type is REDIS_REPLY_INTEGER *\/$/;"	m	struct:redisReply
intlen	hiredis/hiredis.c	/^static int intlen(int i) {$/;"	f	file:
invalid	hiredis/async.h	/^        redisCallbackList invalid;$/;"	m	struct:redisAsyncContext::__anon2
is_conn_in_waiting	conn_manager.h	/^    inline bool is_conn_in_waiting(conn_info_t *conn) {$/;"	f	class:conn_manager_t
is_uid_cmd_in_waiting	conn_manager.h	/^    inline bool is_uid_cmd_in_waiting(uint32_t uid, uint32_t cmd) {$/;"	f	class:conn_manager_t
kTimerIntervalReconnectServiceTimely	timer_procs.h	/^    kTimerIntervalReconnectServiceTimely    = 1, \/\/ 重连service服务器间隔$/;"	e	enum:timer_interval_t
kTimerIntervalWaitingRsp	timer_procs.h	/^    kTimerIntervalWaitingRsp                = 2, \/\/ 请求超过2s 则算超时$/;"	e	enum:timer_interval_t
kTimerTypeReconnectServiceTimely	timer_procs.h	/^    kTimerTypeReconnectServiceTimely        = 1, \/\/ 重连service服务器$/;"	e	enum:timer_type_t
kTimerTypeWaitingRsp	timer_procs.h	/^    kTimerTypeWaitingRsp                    = 2, \/\/ 清理等待时间过长的conn$/;"	e	enum:timer_type_t
key	hiredis/dict.h	/^    void *key;$/;"	m	struct:dictEntry
keyCompare	hiredis/dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	hiredis/dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	hiredis/dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
len	hiredis/hiredis.h	/^    int len; \/* Length of string *\/$/;"	m	struct:redisReply
len	hiredis/hiredis.h	/^    size_t len; \/* Buffer length *\/$/;"	m	struct:redisReader
len	hiredis/sds.h	/^    int len;$/;"	m	struct:sdshdr
len	proto.h	/^    uint32_t len;   $/;"	m	struct:db_proto_header_t
loop	hiredis/adapters/ae.h	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents
loop	hiredis/adapters/libev.h	/^    struct ev_loop *loop;$/;"	m	struct:redisLibevEvents	typeref:struct:redisLibevEvents::ev_loop
loop	hiredis/example-ae.c	/^static aeEventLoop *loop;$/;"	v	file:
main	hiredis/example-ae.c	/^int main (int argc, char **argv) {$/;"	f
main	hiredis/example-libev.c	/^int main (int argc, char **argv) {$/;"	f
main	hiredis/example-libevent.c	/^int main (int argc, char **argv) {$/;"	f
main	hiredis/example.c	/^int main(void) {$/;"	f
main	hiredis/sds.c	/^int main(void) {$/;"	f
main	hiredis/test.c	/^int main(int argc, char **argv) {$/;"	f
main	singleton.h	/^int main()  $/;"	f
maxbuf	hiredis/hiredis.h	/^    size_t maxbuf; \/* Max length of unused buffer *\/$/;"	m	struct:redisReader
moveToNextTask	hiredis/hiredis.c	/^static void moveToNextTask(redisReader *r) {$/;"	f	file:
next	hiredis/async.h	/^    struct redisCallback *next; \/* simple singly linked list *\/$/;"	m	struct:redisCallback	typeref:struct:redisCallback::redisCallback
next	hiredis/dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
nextArgument	hiredis/async.c	/^static char *nextArgument(char *start, char **str, size_t *len) {$/;"	f	file:
nextEntry	hiredis/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
obj	hiredis/hiredis.h	/^    void *obj; \/* holds user-generated value for a read task *\/$/;"	m	struct:redisReadTask
object_creator	singleton.h	/^		object_creator() { singleton_default<T>::instance(); }$/;"	f	struct:singleton_default::object_creator
object_creator	singleton.h	/^	struct object_creator {$/;"	s	struct:singleton_default
object_type	singleton.h	/^	typedef T object_type;$/;"	t	struct:singleton_default
obuf	hiredis/hiredis.h	/^    char *obuf; \/* Write buffer *\/$/;"	m	struct:redisContext
onConnect	hiredis/async.h	/^    redisConnectCallback *onConnect;$/;"	m	struct:redisAsyncContext
onDisconnect	hiredis/async.h	/^    redisDisconnectCallback *onDisconnect;$/;"	m	struct:redisAsyncContext
on_client_conn_closed	dll_iface.cpp	/^extern "C" void on_client_conn_closed(int fd)$/;"	f
on_connect_callback	service.cpp	/^void Service::on_connect_callback(int fd, void* args)$/;"	f	class:Service
on_fd_closed	dll_iface.cpp	/^extern "C" void on_fd_closed(int fd)$/;"	f
op_uid	conn_manager.h	/^    uint32_t op_uid;$/;"	m	struct:conn_info_t
out_	cache_processor.h	/^    dbproto::sc_get_base_info out_;$/;"	m	class:GetPlayerBaseInfoCmdProcessor
parent	hiredis/hiredis.h	/^    struct redisReadTask *parent; \/* parent task *\/$/;"	m	struct:redisReadTask	typeref:struct:redisReadTask::redisReadTask
parse_message	cmd_processor_interface.h	/^inline int parse_message($/;"	f
path	hiredis/test.c	/^        const char *path;$/;"	m	struct:config::__anon4	file:
patterns	hiredis/async.h	/^        struct dict *patterns;$/;"	m	struct:redisAsyncContext::__anon2	typeref:struct:redisAsyncContext::__anon2::dict
pb_log_handler	dll_iface.cpp	/^void pb_log_handler(google::protobuf::LogLevel level,$/;"	f
port	hiredis/test.c	/^        int port;$/;"	m	struct:config::__anon3	file:
pos	hiredis/hiredis.h	/^    size_t pos; \/* Buffer cursor *\/$/;"	m	struct:redisReader
privdata	hiredis/async.h	/^    void *privdata;$/;"	m	struct:redisCallback
privdata	hiredis/dict.h	/^    void *privdata;$/;"	m	struct:dict
privdata	hiredis/hiredis.h	/^    void *privdata; \/* user-settable arbitrary field *\/$/;"	m	struct:redisReadTask
privdata	hiredis/hiredis.h	/^    void *privdata;$/;"	m	struct:redisReader
proc_errno_from_serv	cmd_processor_interface.h	/^    virtual uint32_t proc_errno_from_serv($/;"	f	class:CmdProcessorInterface
proc_events	dll_iface.cpp	/^extern "C" void proc_events()$/;"	f
proc_pkg_from_client	cache_processor.cpp	/^int GetPlayerBaseCacheCmdProcessor::proc_pkg_from_client($/;"	f	class:GetPlayerBaseCacheCmdProcessor
proc_pkg_from_client	cache_processor.h	/^    int proc_pkg_from_client(conn_info_t *conn, const char* body, int bodylen) {$/;"	f	class:GetPlayerBaseInfoCmdProcessor
proc_pkg_from_client	dll_iface.cpp	/^extern "C" int  proc_pkg_from_client(void* data, int len, fdsession_t* fdsess)$/;"	f
proc_pkg_from_client	proto_processor.cpp	/^int ProtoProcessor::proc_pkg_from_client(void* data, int len,$/;"	f	class:ProtoProcessor
proc_pkg_from_serv	cache_processor.cpp	/^int GetPlayerBaseInfoCmdProcessor::proc_pkg_from_serv($/;"	f	class:GetPlayerBaseInfoCmdProcessor
proc_pkg_from_serv	cache_processor.h	/^    int proc_pkg_from_serv(conn_info_t *conn, const char* body, int bodylen) {$/;"	f	class:GetPlayerBaseCacheCmdProcessor
proc_pkg_from_serv	dll_iface.cpp	/^extern "C" void proc_pkg_from_serv(int fd, void* data, int len)$/;"	f
proc_pkg_from_serv	proto_processor.cpp	/^void ProtoProcessor::proc_pkg_from_serv(int fd, void* data, int len)$/;"	f	class:ProtoProcessor
processBulkItem	hiredis/hiredis.c	/^static int processBulkItem(redisReader *r) {$/;"	f	file:
processItem	hiredis/hiredis.c	/^static int processItem(redisReader *r) {$/;"	f	file:
processLineItem	hiredis/hiredis.c	/^static int processLineItem(redisReader *r) {$/;"	f	file:
processMultiBulkItem	hiredis/hiredis.c	/^static int processMultiBulkItem(redisReader *r) {$/;"	f	file:
query	singleton.h	/^	void query(const char *sqlstr) { cout << "exec select " << sqlstr << endl; }$/;"	f	class:SqlDB_t
readBytes	hiredis/hiredis.c	/^static char *readBytes(redisReader *r, unsigned int bytes) {$/;"	f	file:
readLine	hiredis/hiredis.c	/^static char *readLine(redisReader *r, int *_len) {$/;"	f	file:
readLongLong	hiredis/hiredis.c	/^static long long readLongLong(char *s) {$/;"	f	file:
reader	hiredis/hiredis.h	/^    redisReader *reader; \/* Protocol reader *\/$/;"	m	struct:redisContext
reading	hiredis/adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents
reading	hiredis/adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents
reconnect_service_timely	timer_procs.cpp	/^int reconnect_service_timely(void* owner, void* data)$/;"	f
redisAeAddRead	hiredis/adapters/ae.h	/^static void redisAeAddRead(void *privdata) {$/;"	f
redisAeAddWrite	hiredis/adapters/ae.h	/^static void redisAeAddWrite(void *privdata) {$/;"	f
redisAeAttach	hiredis/adapters/ae.h	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f
redisAeCleanup	hiredis/adapters/ae.h	/^static void redisAeCleanup(void *privdata) {$/;"	f
redisAeDelRead	hiredis/adapters/ae.h	/^static void redisAeDelRead(void *privdata) {$/;"	f
redisAeDelWrite	hiredis/adapters/ae.h	/^static void redisAeDelWrite(void *privdata) {$/;"	f
redisAeEvents	hiredis/adapters/ae.h	/^typedef struct redisAeEvents {$/;"	s
redisAeEvents	hiredis/adapters/ae.h	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents
redisAeReadEvent	hiredis/adapters/ae.h	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
redisAeWriteEvent	hiredis/adapters/ae.h	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
redisAppendCommand	hiredis/hiredis.c	/^int redisAppendCommand(redisContext *c, const char *format, ...) {$/;"	f
redisAppendCommandArgv	hiredis/hiredis.c	/^int redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisAsyncCommand	hiredis/async.c	/^int redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, ...) {$/;"	f
redisAsyncCommandArgv	hiredis/async.c	/^int redisAsyncCommandArgv(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisAsyncConnect	hiredis/async.c	/^redisAsyncContext *redisAsyncConnect(const char *ip, int port) {$/;"	f
redisAsyncConnectUnix	hiredis/async.c	/^redisAsyncContext *redisAsyncConnectUnix(const char *path) {$/;"	f
redisAsyncContext	hiredis/async.h	/^typedef struct redisAsyncContext {$/;"	s
redisAsyncContext	hiredis/async.h	/^} redisAsyncContext;$/;"	t	typeref:struct:redisAsyncContext
redisAsyncDisconnect	hiredis/async.c	/^void redisAsyncDisconnect(redisAsyncContext *ac) {$/;"	f
redisAsyncFree	hiredis/async.c	/^void redisAsyncFree(redisAsyncContext *ac) {$/;"	f
redisAsyncHandleRead	hiredis/async.c	/^void redisAsyncHandleRead(redisAsyncContext *ac) {$/;"	f
redisAsyncHandleWrite	hiredis/async.c	/^void redisAsyncHandleWrite(redisAsyncContext *ac) {$/;"	f
redisAsyncInitialize	hiredis/async.c	/^static redisAsyncContext *redisAsyncInitialize(redisContext *c) {$/;"	f	file:
redisAsyncSetConnectCallback	hiredis/async.c	/^int redisAsyncSetConnectCallback(redisAsyncContext *ac, redisConnectCallback *fn) {$/;"	f
redisAsyncSetDisconnectCallback	hiredis/async.c	/^int redisAsyncSetDisconnectCallback(redisAsyncContext *ac, redisDisconnectCallback *fn) {$/;"	f
redisBufferRead	hiredis/hiredis.c	/^int redisBufferRead(redisContext *c) {$/;"	f
redisBufferWrite	hiredis/hiredis.c	/^int redisBufferWrite(redisContext *c, int *done) {$/;"	f
redisCallback	hiredis/async.h	/^typedef struct redisCallback {$/;"	s
redisCallback	hiredis/async.h	/^} redisCallback;$/;"	t	typeref:struct:redisCallback
redisCallbackFn	hiredis/async.h	/^typedef void (redisCallbackFn)(struct redisAsyncContext*, void*, void*);$/;"	t
redisCallbackList	hiredis/async.h	/^typedef struct redisCallbackList {$/;"	s
redisCallbackList	hiredis/async.h	/^} redisCallbackList;$/;"	t	typeref:struct:redisCallbackList
redisCheckSocketError	hiredis/net.c	/^int redisCheckSocketError(redisContext *c, int fd) {$/;"	f
redisCommand	hiredis/hiredis.c	/^void *redisCommand(redisContext *c, const char *format, ...) {$/;"	f
redisCommandArgv	hiredis/hiredis.c	/^void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisConnect	hiredis/hiredis.c	/^redisContext *redisConnect(const char *ip, int port) {$/;"	f
redisConnectCallback	hiredis/async.h	/^typedef void (redisConnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisConnectNonBlock	hiredis/hiredis.c	/^redisContext *redisConnectNonBlock(const char *ip, int port) {$/;"	f
redisConnectUnix	hiredis/hiredis.c	/^redisContext *redisConnectUnix(const char *path) {$/;"	f
redisConnectUnixNonBlock	hiredis/hiredis.c	/^redisContext *redisConnectUnixNonBlock(const char *path) {$/;"	f
redisConnectUnixWithTimeout	hiredis/hiredis.c	/^redisContext *redisConnectUnixWithTimeout(const char *path, struct timeval tv) {$/;"	f
redisConnectWithTimeout	hiredis/hiredis.c	/^redisContext *redisConnectWithTimeout(const char *ip, int port, struct timeval tv) {$/;"	f
redisContext	hiredis/hiredis.h	/^typedef struct redisContext {$/;"	s
redisContext	hiredis/hiredis.h	/^} redisContext;$/;"	t	typeref:struct:redisContext
redisContextConnectTcp	hiredis/net.c	/^int redisContextConnectTcp(redisContext *c, const char *addr, int port, struct timeval *timeout) {$/;"	f
redisContextConnectUnix	hiredis/net.c	/^int redisContextConnectUnix(redisContext *c, const char *path, struct timeval *timeout) {$/;"	f
redisContextInit	hiredis/hiredis.c	/^static redisContext *redisContextInit(void) {$/;"	f	file:
redisContextSetTimeout	hiredis/net.c	/^int redisContextSetTimeout(redisContext *c, struct timeval tv) {$/;"	f
redisContextWaitReady	hiredis/net.c	/^static int redisContextWaitReady(redisContext *c, int fd, const struct timeval *timeout) {$/;"	f	file:
redisCreateSocket	hiredis/net.c	/^static int redisCreateSocket(redisContext *c, int type) {$/;"	f	file:
redisDisconnectCallback	hiredis/async.h	/^typedef void (redisDisconnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisFormatCommand	hiredis/hiredis.c	/^int redisFormatCommand(char **target, const char *format, ...) {$/;"	f
redisFormatCommandArgv	hiredis/hiredis.c	/^int redisFormatCommandArgv(char **target, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisFree	hiredis/hiredis.c	/^void redisFree(redisContext *c) {$/;"	f
redisGetReply	hiredis/hiredis.c	/^int redisGetReply(redisContext *c, void **reply) {$/;"	f
redisGetReplyFromReader	hiredis/hiredis.c	/^int redisGetReplyFromReader(redisContext *c, void **reply) {$/;"	f
redisLibevAddRead	hiredis/adapters/libev.h	/^static void redisLibevAddRead(void *privdata) {$/;"	f
redisLibevAddWrite	hiredis/adapters/libev.h	/^static void redisLibevAddWrite(void *privdata) {$/;"	f
redisLibevAttach	hiredis/adapters/libev.h	/^static int redisLibevAttach(EV_P_ redisAsyncContext *ac) {$/;"	f
redisLibevCleanup	hiredis/adapters/libev.h	/^static void redisLibevCleanup(void *privdata) {$/;"	f
redisLibevDelRead	hiredis/adapters/libev.h	/^static void redisLibevDelRead(void *privdata) {$/;"	f
redisLibevDelWrite	hiredis/adapters/libev.h	/^static void redisLibevDelWrite(void *privdata) {$/;"	f
redisLibevEvents	hiredis/adapters/libev.h	/^typedef struct redisLibevEvents {$/;"	s
redisLibevEvents	hiredis/adapters/libev.h	/^} redisLibevEvents;$/;"	t	typeref:struct:redisLibevEvents
redisLibevReadEvent	hiredis/adapters/libev.h	/^static void redisLibevReadEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f
redisLibevWriteEvent	hiredis/adapters/libev.h	/^static void redisLibevWriteEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f
redisLibeventAddRead	hiredis/adapters/libevent.h	/^static void redisLibeventAddRead(void *privdata) {$/;"	f
redisLibeventAddWrite	hiredis/adapters/libevent.h	/^static void redisLibeventAddWrite(void *privdata) {$/;"	f
redisLibeventAttach	hiredis/adapters/libevent.h	/^static int redisLibeventAttach(redisAsyncContext *ac, struct event_base *base) {$/;"	f
redisLibeventCleanup	hiredis/adapters/libevent.h	/^static void redisLibeventCleanup(void *privdata) {$/;"	f
redisLibeventDelRead	hiredis/adapters/libevent.h	/^static void redisLibeventDelRead(void *privdata) {$/;"	f
redisLibeventDelWrite	hiredis/adapters/libevent.h	/^static void redisLibeventDelWrite(void *privdata) {$/;"	f
redisLibeventEvents	hiredis/adapters/libevent.h	/^typedef struct redisLibeventEvents {$/;"	s
redisLibeventEvents	hiredis/adapters/libevent.h	/^} redisLibeventEvents;$/;"	t	typeref:struct:redisLibeventEvents
redisLibeventReadEvent	hiredis/adapters/libevent.h	/^static void redisLibeventReadEvent(int fd, short event, void *arg) {$/;"	f
redisLibeventWriteEvent	hiredis/adapters/libevent.h	/^static void redisLibeventWriteEvent(int fd, short event, void *arg) {$/;"	f
redisProcessCallbacks	hiredis/async.c	/^void redisProcessCallbacks(redisAsyncContext *ac) {$/;"	f
redisReadTask	hiredis/hiredis.h	/^typedef struct redisReadTask {$/;"	s
redisReadTask	hiredis/hiredis.h	/^} redisReadTask;$/;"	t	typeref:struct:redisReadTask
redisReader	hiredis/hiredis.h	/^typedef struct redisReader {$/;"	s
redisReader	hiredis/hiredis.h	/^} redisReader;$/;"	t	typeref:struct:redisReader
redisReaderCreate	hiredis/hiredis.c	/^redisReader *redisReaderCreate(void) {$/;"	f
redisReaderFeed	hiredis/hiredis.c	/^int redisReaderFeed(redisReader *r, const char *buf, size_t len) {$/;"	f
redisReaderFree	hiredis/hiredis.c	/^void redisReaderFree(redisReader *r) {$/;"	f
redisReaderGetReply	hiredis/hiredis.c	/^int redisReaderGetReply(redisReader *r, void **reply) {$/;"	f
redisReply	hiredis/hiredis.h	/^typedef struct redisReply {$/;"	s
redisReply	hiredis/hiredis.h	/^} redisReply;$/;"	t	typeref:struct:redisReply
redisReplyObjectFunctions	hiredis/hiredis.h	/^typedef struct redisReplyObjectFunctions {$/;"	s
redisReplyObjectFunctions	hiredis/hiredis.h	/^} redisReplyObjectFunctions;$/;"	t	typeref:struct:redisReplyObjectFunctions
redisReplyReaderCreate	hiredis/hiredis.h	147;"	d
redisReplyReaderFeed	hiredis/hiredis.h	149;"	d
redisReplyReaderFree	hiredis/hiredis.h	148;"	d
redisReplyReaderGetError	hiredis/hiredis.h	153;"	d
redisReplyReaderGetObject	hiredis/hiredis.h	152;"	d
redisReplyReaderGetReply	hiredis/hiredis.h	150;"	d
redisReplyReaderSetPrivdata	hiredis/hiredis.h	151;"	d
redisSetBlocking	hiredis/net.c	/^static int redisSetBlocking(redisContext *c, int fd, int blocking) {$/;"	f	file:
redisSetReuseAddr	hiredis/net.c	/^static int redisSetReuseAddr(redisContext *c, int fd) {$/;"	f	file:
redisSetTcpNoDelay	hiredis/net.c	/^static int redisSetTcpNoDelay(redisContext *c, int fd) {$/;"	f	file:
redisSetTimeout	hiredis/hiredis.c	/^int redisSetTimeout(redisContext *c, struct timeval tv) {$/;"	f
redis_context_	hiredis_manager.h	/^	redisContext *redis_context_;$/;"	m	class:hiredis_manager_t
redisvAppendCommand	hiredis/hiredis.c	/^int redisvAppendCommand(redisContext *c, const char *format, va_list ap) {$/;"	f
redisvAsyncCommand	hiredis/async.c	/^int redisvAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, va_list ap) {$/;"	f
redisvCommand	hiredis/hiredis.c	/^void *redisvCommand(redisContext *c, const char *format, va_list ap) {$/;"	f
redisvFormatCommand	hiredis/hiredis.c	/^int redisvFormatCommand(char **target, const char *format, va_list ap) {$/;"	f
register_command	proto_processor.cpp	/^int ProtoProcessor::register_command($/;"	f	class:ProtoProcessor
register_timers	timer_procs.cpp	/^int register_timers()$/;"	f
replies	hiredis/async.h	/^    redisCallbackList replies;$/;"	m	struct:redisAsyncContext
reply	hiredis/hiredis.h	/^    void *reply; \/* Temporary reply pointer *\/$/;"	m	struct:redisReader
ret	proto.h	/^    uint32_t ret;$/;"	m	struct:db_proto_header_t
rev	hiredis/adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents
rev	hiredis/adapters/libevent.h	/^    struct event rev, wev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::event
ridx	hiredis/hiredis.h	/^    int ridx; \/* Index of current read task *\/$/;"	m	struct:redisReader
rstack	hiredis/hiredis.h	/^    redisReadTask rstack[9];$/;"	m	struct:redisReader
sds	hiredis/sds.h	/^typedef char *sds;$/;"	t
sdsMakeRoomFor	hiredis/sds.c	/^static sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f	file:
sdsOomAbort	hiredis/sds.c	/^static void sdsOomAbort(void) {$/;"	f	file:
sdsavail	hiredis/sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdscat	hiredis/sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatlen	hiredis/sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	hiredis/sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	hiredis/sds.c	/^sds sdscatrepr(sds s, char *p, size_t len) {$/;"	f
sdscatvprintf	hiredis/sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdscmp	hiredis/sds.c	/^int sdscmp(sds s1, sds s2) {$/;"	f
sdscpy	hiredis/sds.c	/^sds sdscpy(sds s, char *t) {$/;"	f
sdscpylen	hiredis/sds.c	/^sds sdscpylen(sds s, char *t, size_t len) {$/;"	f
sdsdup	hiredis/sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	hiredis/sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	hiredis/sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	hiredis/sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	hiredis/sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	hiredis/sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr	hiredis/sds.h	/^struct sdshdr {$/;"	s
sdslen	hiredis/sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdsnew	hiredis/sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	hiredis/sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	hiredis/sds.c	/^sds sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	hiredis/sds.c	/^sds *sdssplitargs(char *line, int *argc) {$/;"	f
sdssplitlen	hiredis/sds.c	/^sds *sdssplitlen(char *s, int len, char *sep, int seplen, int *count) {$/;"	f
sdstolower	hiredis/sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	hiredis/sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	hiredis/sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsupdatelen	hiredis/sds.c	/^void sdsupdatelen(sds s) {$/;"	f
seekNewline	hiredis/hiredis.c	/^static char *seekNewline(char *s, size_t len) {$/;"	f	file:
select_database	hiredis/test.c	/^static redisContext *select_database(redisContext *c) {$/;"	f	file:
send_buf	conn_manager.cpp	/^static char send_buf[65536 * 32];$/;"	v	file:
send_buf	service.cpp	/^int Service::send_buf(uint32_t userid, uint16_t cmd, uint32_t seq,$/;"	f	class:Service
send_buf_	service.h	/^    char send_buf_[10000];$/;"	m	class:Service
send_cmsg	service.cpp	/^int Service::send_cmsg(uint32_t userid, uint16_t cmd,$/;"	f	class:Service
send_err_to_conn	conn_manager.cpp	/^int send_err_to_conn(conn_info_t *conn, uint32_t ret)$/;"	f
send_err_to_fdsess	conn_manager.cpp	/^int send_err_to_fdsess(const fdsession_t *fdsess, uint32_t uid, uint32_t cmd, uint32_t seq, uint32_t ret)$/;"	f
send_msg	service.cpp	/^int Service::send_msg(uint32_t userid, uint16_t cmd, uint32_t seq,$/;"	f	class:Service
send_msg_to_conn	conn_manager.cpp	/^int send_msg_to_conn(conn_info_t *conn, const google::protobuf::Message& msg)$/;"	f
seq	proto.h	/^    uint32_t seq;$/;"	m	struct:db_proto_header_t
service_name	service.h	/^    inline const std::string& service_name() const$/;"	f	class:Service
service_name_	service.h	/^    std::string service_name_;$/;"	m	class:Service
set_fd	service.h	/^    inline void set_fd(int fd) {$/;"	f	class:Service
set_player_info	hiredis_manager.cpp	/^void hiredis_manager_t::set_player_info(uint32_t uid, std::string &val)$/;"	f	class:hiredis_manager_t
singleton_default	singleton.h	/^struct singleton_default {$/;"	s
size	hiredis/dict.h	/^    unsigned long size;$/;"	m	struct:dict
sizemask	hiredis/dict.h	/^    unsigned long sizemask;$/;"	m	struct:dict
str	hiredis/hiredis.h	/^    char *str; \/* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING *\/$/;"	m	struct:redisReply
sub	hiredis/async.h	/^    } sub;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon2
table	hiredis/dict.h	/^    dictEntry **table;$/;"	m	struct:dict
tail	hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList
tcp	hiredis/test.c	/^    } tcp;$/;"	m	struct:config	typeref:struct:config::__anon3	file:
test	hiredis/test.c	34;"	d	file:
test_blocking_connection	hiredis/test.c	/^static void test_blocking_connection(struct config config) {$/;"	f	file:
test_blocking_connection_errors	hiredis/test.c	/^static void test_blocking_connection_errors(void) {$/;"	f	file:
test_blocking_io_errors	hiredis/test.c	/^static void test_blocking_io_errors(struct config config) {$/;"	f	file:
test_cond	hiredis/sds.c	509;"	d	file:
test_cond	hiredis/test.c	35;"	d	file:
test_format_commands	hiredis/test.c	/^static void test_format_commands(void) {$/;"	f	file:
test_reply_reader	hiredis/test.c	/^static void test_reply_reader(void) {$/;"	f	file:
test_report	hiredis/sds.c	513;"	d	file:
test_throughput	hiredis/test.c	/^static void test_throughput(struct config config) {$/;"	f	file:
tests	hiredis/test.c	/^static int tests = 0, fails = 0;$/;"	v	file:
timer_head_t	timer_procs.h	/^struct timer_head_t {$/;"	s
timer_interval_t	timer_procs.h	/^enum timer_interval_t {$/;"	g
timer_list	timer_procs.h	/^    list_head_t timer_list;$/;"	m	struct:timer_head_t
timer_type_t	timer_procs.h	/^enum timer_type_t {$/;"	g
type	hiredis/dict.h	/^    dictType *type;$/;"	m	struct:dict
type	hiredis/hiredis.h	/^    int type; \/* REDIS_REPLY_* *\/$/;"	m	struct:redisReply
type	hiredis/hiredis.h	/^    int type;$/;"	m	struct:redisReadTask
type	hiredis/test.c	/^    enum connection_type type;$/;"	m	struct:config	typeref:enum:config::connection_type	file:
uid	proto.h	/^    uint32_t uid;$/;"	m	struct:db_proto_header_t
uname_S	hiredis/Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
unix	hiredis/test.c	/^    } unix;$/;"	m	struct:config	typeref:struct:config::__anon4	file:
usec	hiredis/test.c	/^static long long usec(void) {$/;"	f	file:
used	hiredis/dict.h	/^    unsigned long used;$/;"	m	struct:dict
val	hiredis/dict.h	/^    void *val;$/;"	m	struct:dictEntry
valDestructor	hiredis/dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	hiredis/dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
w_set_iter_t	conn_manager.h	/^    typedef std::set<conn_info_t*>::iterator w_set_iter_t;$/;"	t	class:conn_manager_t
w_set_t	conn_manager.h	/^    typedef std::set<conn_info_t*> w_set_t;$/;"	t	class:conn_manager_t
wait_cmd	conn_manager.h	/^    uint16_t wait_cmd;$/;"	m	struct:conn_info_t
wait_map_iter_t	conn_manager.h	/^    typedef std::map<uint32_t, cmd_map_t >::iterator wait_map_iter_t;$/;"	t	class:conn_manager_t
wait_map_t	conn_manager.h	/^    typedef std::map<uint32_t, cmd_map_t > wait_map_t;$/;"	t	class:conn_manager_t
wait_set_	conn_manager.h	/^    w_set_t wait_set_;$/;"	m	class:conn_manager_t
wait_uid	conn_manager.h	/^    uint32_t wait_uid; $/;"	m	struct:conn_info_t
wait_uid_map_	conn_manager.h	/^    wait_map_t wait_uid_map_;$/;"	m	class:conn_manager_t
wev	hiredis/adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents
wev	hiredis/adapters/libevent.h	/^    struct event rev, wev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::
writing	hiredis/adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents
writing	hiredis/adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents
~ProtoProcessor	proto_processor.cpp	/^ProtoProcessor::~ProtoProcessor()$/;"	f	class:ProtoProcessor
~Service	service.cpp	/^Service::~Service()$/;"	f	class:Service
~conn_manager_t	conn_manager.h	/^    ~conn_manager_t() {$/;"	f	class:conn_manager_t
~hiredis_manager_t	hiredis_manager.cpp	/^hiredis_manager_t::~hiredis_manager_t()$/;"	f	class:hiredis_manager_t
