// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#ifndef PROTOBUF_robot_2eproto__INCLUDED
#define PROTOBUF_robot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pbcfg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_robot_2eproto();
void protobuf_AssignDesc_robot_2eproto();
void protobuf_ShutdownFile_robot_2eproto();

class Action;
class Client;
class Group;
class Body;
class CfgRoot;

// ===================================================================

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string request_uniq_name = 1;
  inline int request_uniq_name_size() const;
  inline void clear_request_uniq_name();
  static const int kRequestUniqNameFieldNumber = 1;
  inline const ::std::string& request_uniq_name(int index) const;
  inline ::std::string* mutable_request_uniq_name(int index);
  inline void set_request_uniq_name(int index, const ::std::string& value);
  inline void set_request_uniq_name(int index, const char* value);
  inline void set_request_uniq_name(int index, const char* value, size_t size);
  inline ::std::string* add_request_uniq_name();
  inline void add_request_uniq_name(const ::std::string& value);
  inline void add_request_uniq_name(const char* value);
  inline void add_request_uniq_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& request_uniq_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_request_uniq_name();

  // repeated string response = 2;
  inline int response_size() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline const ::std::string& response(int index) const;
  inline ::std::string* mutable_response(int index);
  inline void set_response(int index, const ::std::string& value);
  inline void set_response(int index, const char* value);
  inline void set_response(int index, const char* value, size_t size);
  inline ::std::string* add_response();
  inline void add_response(const ::std::string& value);
  inline void add_response(const char* value);
  inline void add_response(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& response() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_response();

  // optional int32 timeout = 3 [default = 1];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);

  // optional int32 stop_loop_count = 5 [default = 0];
  inline bool has_stop_loop_count() const;
  inline void clear_stop_loop_count();
  static const int kStopLoopCountFieldNumber = 5;
  inline ::google::protobuf::int32 stop_loop_count() const;
  inline void set_stop_loop_count(::google::protobuf::int32 value);

  // optional int32 min_duration = 6 [default = 0];
  inline bool has_min_duration() const;
  inline void clear_min_duration();
  static const int kMinDurationFieldNumber = 6;
  inline ::google::protobuf::int32 min_duration() const;
  inline void set_min_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbcfg.Action)
 private:
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_stop_loop_count();
  inline void clear_has_stop_loop_count();
  inline void set_has_min_duration();
  inline void clear_has_min_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> request_uniq_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> response_;
  ::google::protobuf::int32 timeout_;
  ::google::protobuf::int32 stop_loop_count_;
  ::google::protobuf::int32 min_duration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_robot_2eproto();
  friend void protobuf_AssignDesc_robot_2eproto();
  friend void protobuf_ShutdownFile_robot_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class Client : public ::google::protobuf::Message {
 public:
  Client();
  virtual ~Client();

  Client(const Client& from);

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Client& default_instance();

  void Swap(Client* other);

  // implements Message ----------------------------------------------

  Client* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pbcfg.Client)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_robot_2eproto();
  friend void protobuf_AssignDesc_robot_2eproto();
  friend void protobuf_ShutdownFile_robot_2eproto();

  void InitAsDefaultInstance();
  static Client* default_instance_;
};
// -------------------------------------------------------------------

class Group : public ::google::protobuf::Message {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Group& default_instance();

  void Swap(Group* other);

  // implements Message ----------------------------------------------

  Group* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string peer_addr = 2;
  inline bool has_peer_addr() const;
  inline void clear_peer_addr();
  static const int kPeerAddrFieldNumber = 2;
  inline const ::std::string& peer_addr() const;
  inline void set_peer_addr(const ::std::string& value);
  inline void set_peer_addr(const char* value);
  inline void set_peer_addr(const char* value, size_t size);
  inline ::std::string* mutable_peer_addr();
  inline ::std::string* release_peer_addr();
  inline void set_allocated_peer_addr(::std::string* peer_addr);

  // required int32 max_pkg_len = 4;
  inline bool has_max_pkg_len() const;
  inline void clear_max_pkg_len();
  static const int kMaxPkgLenFieldNumber = 4;
  inline ::google::protobuf::int32 max_pkg_len() const;
  inline void set_max_pkg_len(::google::protobuf::int32 value);

  // optional int32 loop_count = 7 [default = 1];
  inline bool has_loop_count() const;
  inline void clear_loop_count();
  static const int kLoopCountFieldNumber = 7;
  inline ::google::protobuf::int32 loop_count() const;
  inline void set_loop_count(::google::protobuf::int32 value);

  // repeated .pbcfg.Action action = 8;
  inline int action_size() const;
  inline void clear_action();
  static const int kActionFieldNumber = 8;
  inline const ::pbcfg::Action& action(int index) const;
  inline ::pbcfg::Action* mutable_action(int index);
  inline ::pbcfg::Action* add_action();
  inline const ::google::protobuf::RepeatedPtrField< ::pbcfg::Action >&
      action() const;
  inline ::google::protobuf::RepeatedPtrField< ::pbcfg::Action >*
      mutable_action();

  // optional uint32 client_uid_start = 9 [default = 10000];
  inline bool has_client_uid_start() const;
  inline void clear_client_uid_start();
  static const int kClientUidStartFieldNumber = 9;
  inline ::google::protobuf::uint32 client_uid_start() const;
  inline void set_client_uid_start(::google::protobuf::uint32 value);

  // optional uint32 client_uid_end = 10 [default = 19999];
  inline bool has_client_uid_end() const;
  inline void clear_client_uid_end();
  static const int kClientUidEndFieldNumber = 10;
  inline ::google::protobuf::uint32 client_uid_end() const;
  inline void set_client_uid_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pbcfg.Group)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_peer_addr();
  inline void clear_has_peer_addr();
  inline void set_has_max_pkg_len();
  inline void clear_has_max_pkg_len();
  inline void set_has_loop_count();
  inline void clear_has_loop_count();
  inline void set_has_client_uid_start();
  inline void clear_has_client_uid_start();
  inline void set_has_client_uid_end();
  inline void clear_has_client_uid_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* peer_addr_;
  ::google::protobuf::int32 max_pkg_len_;
  ::google::protobuf::int32 loop_count_;
  ::google::protobuf::RepeatedPtrField< ::pbcfg::Action > action_;
  ::google::protobuf::uint32 client_uid_start_;
  ::google::protobuf::uint32 client_uid_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_robot_2eproto();
  friend void protobuf_AssignDesc_robot_2eproto();
  friend void protobuf_ShutdownFile_robot_2eproto();

  void InitAsDefaultInstance();
  static Group* default_instance_;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  void Swap(Body* other);

  // implements Message ----------------------------------------------

  Body* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uniq_name = 1;
  inline bool has_uniq_name() const;
  inline void clear_uniq_name();
  static const int kUniqNameFieldNumber = 1;
  inline const ::std::string& uniq_name() const;
  inline void set_uniq_name(const ::std::string& value);
  inline void set_uniq_name(const char* value);
  inline void set_uniq_name(const char* value, size_t size);
  inline ::std::string* mutable_uniq_name();
  inline ::std::string* release_uniq_name();
  inline void set_allocated_uniq_name(::std::string* uniq_name);

  // required string type_name = 2;
  inline bool has_type_name() const;
  inline void clear_type_name();
  static const int kTypeNameFieldNumber = 2;
  inline const ::std::string& type_name() const;
  inline void set_type_name(const ::std::string& value);
  inline void set_type_name(const char* value);
  inline void set_type_name(const char* value, size_t size);
  inline ::std::string* mutable_type_name();
  inline ::std::string* release_type_name();
  inline void set_allocated_type_name(::std::string* type_name);

  // required bytes text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:pbcfg.Body)
 private:
  inline void set_has_uniq_name();
  inline void clear_has_uniq_name();
  inline void set_has_type_name();
  inline void clear_has_type_name();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uniq_name_;
  ::std::string* type_name_;
  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_robot_2eproto();
  friend void protobuf_AssignDesc_robot_2eproto();
  friend void protobuf_ShutdownFile_robot_2eproto();

  void InitAsDefaultInstance();
  static Body* default_instance_;
};
// -------------------------------------------------------------------

class CfgRoot : public ::google::protobuf::Message {
 public:
  CfgRoot();
  virtual ~CfgRoot();

  CfgRoot(const CfgRoot& from);

  inline CfgRoot& operator=(const CfgRoot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CfgRoot& default_instance();

  void Swap(CfgRoot* other);

  // implements Message ----------------------------------------------

  CfgRoot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CfgRoot& from);
  void MergeFrom(const CfgRoot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes proto_path = 1;
  inline int proto_path_size() const;
  inline void clear_proto_path();
  static const int kProtoPathFieldNumber = 1;
  inline const ::std::string& proto_path(int index) const;
  inline ::std::string* mutable_proto_path(int index);
  inline void set_proto_path(int index, const ::std::string& value);
  inline void set_proto_path(int index, const char* value);
  inline void set_proto_path(int index, const void* value, size_t size);
  inline ::std::string* add_proto_path();
  inline void add_proto_path(const ::std::string& value);
  inline void add_proto_path(const char* value);
  inline void add_proto_path(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& proto_path() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_proto_path();

  // repeated .pbcfg.Group group_config = 2;
  inline int group_config_size() const;
  inline void clear_group_config();
  static const int kGroupConfigFieldNumber = 2;
  inline const ::pbcfg::Group& group_config(int index) const;
  inline ::pbcfg::Group* mutable_group_config(int index);
  inline ::pbcfg::Group* add_group_config();
  inline const ::google::protobuf::RepeatedPtrField< ::pbcfg::Group >&
      group_config() const;
  inline ::google::protobuf::RepeatedPtrField< ::pbcfg::Group >*
      mutable_group_config();

  // repeated .pbcfg.Body body = 3;
  inline int body_size() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 3;
  inline const ::pbcfg::Body& body(int index) const;
  inline ::pbcfg::Body* mutable_body(int index);
  inline ::pbcfg::Body* add_body();
  inline const ::google::protobuf::RepeatedPtrField< ::pbcfg::Body >&
      body() const;
  inline ::google::protobuf::RepeatedPtrField< ::pbcfg::Body >*
      mutable_body();

  // @@protoc_insertion_point(class_scope:pbcfg.CfgRoot)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> proto_path_;
  ::google::protobuf::RepeatedPtrField< ::pbcfg::Group > group_config_;
  ::google::protobuf::RepeatedPtrField< ::pbcfg::Body > body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_robot_2eproto();
  friend void protobuf_AssignDesc_robot_2eproto();
  friend void protobuf_ShutdownFile_robot_2eproto();

  void InitAsDefaultInstance();
  static CfgRoot* default_instance_;
};
// ===================================================================


// ===================================================================

// Action

// repeated string request_uniq_name = 1;
inline int Action::request_uniq_name_size() const {
  return request_uniq_name_.size();
}
inline void Action::clear_request_uniq_name() {
  request_uniq_name_.Clear();
}
inline const ::std::string& Action::request_uniq_name(int index) const {
  return request_uniq_name_.Get(index);
}
inline ::std::string* Action::mutable_request_uniq_name(int index) {
  return request_uniq_name_.Mutable(index);
}
inline void Action::set_request_uniq_name(int index, const ::std::string& value) {
  request_uniq_name_.Mutable(index)->assign(value);
}
inline void Action::set_request_uniq_name(int index, const char* value) {
  request_uniq_name_.Mutable(index)->assign(value);
}
inline void Action::set_request_uniq_name(int index, const char* value, size_t size) {
  request_uniq_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Action::add_request_uniq_name() {
  return request_uniq_name_.Add();
}
inline void Action::add_request_uniq_name(const ::std::string& value) {
  request_uniq_name_.Add()->assign(value);
}
inline void Action::add_request_uniq_name(const char* value) {
  request_uniq_name_.Add()->assign(value);
}
inline void Action::add_request_uniq_name(const char* value, size_t size) {
  request_uniq_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Action::request_uniq_name() const {
  return request_uniq_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Action::mutable_request_uniq_name() {
  return &request_uniq_name_;
}

// repeated string response = 2;
inline int Action::response_size() const {
  return response_.size();
}
inline void Action::clear_response() {
  response_.Clear();
}
inline const ::std::string& Action::response(int index) const {
  return response_.Get(index);
}
inline ::std::string* Action::mutable_response(int index) {
  return response_.Mutable(index);
}
inline void Action::set_response(int index, const ::std::string& value) {
  response_.Mutable(index)->assign(value);
}
inline void Action::set_response(int index, const char* value) {
  response_.Mutable(index)->assign(value);
}
inline void Action::set_response(int index, const char* value, size_t size) {
  response_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Action::add_response() {
  return response_.Add();
}
inline void Action::add_response(const ::std::string& value) {
  response_.Add()->assign(value);
}
inline void Action::add_response(const char* value) {
  response_.Add()->assign(value);
}
inline void Action::add_response(const char* value, size_t size) {
  response_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Action::response() const {
  return response_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Action::mutable_response() {
  return &response_;
}

// optional int32 timeout = 3 [default = 1];
inline bool Action::has_timeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_timeout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_timeout() {
  timeout_ = 1;
  clear_has_timeout();
}
inline ::google::protobuf::int32 Action::timeout() const {
  return timeout_;
}
inline void Action::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
}

// optional int32 stop_loop_count = 5 [default = 0];
inline bool Action::has_stop_loop_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::set_has_stop_loop_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Action::clear_has_stop_loop_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Action::clear_stop_loop_count() {
  stop_loop_count_ = 0;
  clear_has_stop_loop_count();
}
inline ::google::protobuf::int32 Action::stop_loop_count() const {
  return stop_loop_count_;
}
inline void Action::set_stop_loop_count(::google::protobuf::int32 value) {
  set_has_stop_loop_count();
  stop_loop_count_ = value;
}

// optional int32 min_duration = 6 [default = 0];
inline bool Action::has_min_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Action::set_has_min_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Action::clear_has_min_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Action::clear_min_duration() {
  min_duration_ = 0;
  clear_has_min_duration();
}
inline ::google::protobuf::int32 Action::min_duration() const {
  return min_duration_;
}
inline void Action::set_min_duration(::google::protobuf::int32 value) {
  set_has_min_duration();
  min_duration_ = value;
}

// -------------------------------------------------------------------

// Client

// required uint32 uid = 1;
inline bool Client::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Client::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Client::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Client::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Client::uid() const {
  return uid_;
}
inline void Client::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// Group

// required bytes name = 1;
inline bool Group::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Group::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Group::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Group::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Group::name() const {
  return *name_;
}
inline void Group::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Group::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Group::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Group::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Group::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Group::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string peer_addr = 2;
inline bool Group::has_peer_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Group::set_has_peer_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Group::clear_has_peer_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Group::clear_peer_addr() {
  if (peer_addr_ != &::google::protobuf::internal::kEmptyString) {
    peer_addr_->clear();
  }
  clear_has_peer_addr();
}
inline const ::std::string& Group::peer_addr() const {
  return *peer_addr_;
}
inline void Group::set_peer_addr(const ::std::string& value) {
  set_has_peer_addr();
  if (peer_addr_ == &::google::protobuf::internal::kEmptyString) {
    peer_addr_ = new ::std::string;
  }
  peer_addr_->assign(value);
}
inline void Group::set_peer_addr(const char* value) {
  set_has_peer_addr();
  if (peer_addr_ == &::google::protobuf::internal::kEmptyString) {
    peer_addr_ = new ::std::string;
  }
  peer_addr_->assign(value);
}
inline void Group::set_peer_addr(const char* value, size_t size) {
  set_has_peer_addr();
  if (peer_addr_ == &::google::protobuf::internal::kEmptyString) {
    peer_addr_ = new ::std::string;
  }
  peer_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Group::mutable_peer_addr() {
  set_has_peer_addr();
  if (peer_addr_ == &::google::protobuf::internal::kEmptyString) {
    peer_addr_ = new ::std::string;
  }
  return peer_addr_;
}
inline ::std::string* Group::release_peer_addr() {
  clear_has_peer_addr();
  if (peer_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_addr_;
    peer_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Group::set_allocated_peer_addr(::std::string* peer_addr) {
  if (peer_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_addr_;
  }
  if (peer_addr) {
    set_has_peer_addr();
    peer_addr_ = peer_addr;
  } else {
    clear_has_peer_addr();
    peer_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 max_pkg_len = 4;
inline bool Group::has_max_pkg_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Group::set_has_max_pkg_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Group::clear_has_max_pkg_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Group::clear_max_pkg_len() {
  max_pkg_len_ = 0;
  clear_has_max_pkg_len();
}
inline ::google::protobuf::int32 Group::max_pkg_len() const {
  return max_pkg_len_;
}
inline void Group::set_max_pkg_len(::google::protobuf::int32 value) {
  set_has_max_pkg_len();
  max_pkg_len_ = value;
}

// optional int32 loop_count = 7 [default = 1];
inline bool Group::has_loop_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Group::set_has_loop_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Group::clear_has_loop_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Group::clear_loop_count() {
  loop_count_ = 1;
  clear_has_loop_count();
}
inline ::google::protobuf::int32 Group::loop_count() const {
  return loop_count_;
}
inline void Group::set_loop_count(::google::protobuf::int32 value) {
  set_has_loop_count();
  loop_count_ = value;
}

// repeated .pbcfg.Action action = 8;
inline int Group::action_size() const {
  return action_.size();
}
inline void Group::clear_action() {
  action_.Clear();
}
inline const ::pbcfg::Action& Group::action(int index) const {
  return action_.Get(index);
}
inline ::pbcfg::Action* Group::mutable_action(int index) {
  return action_.Mutable(index);
}
inline ::pbcfg::Action* Group::add_action() {
  return action_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pbcfg::Action >&
Group::action() const {
  return action_;
}
inline ::google::protobuf::RepeatedPtrField< ::pbcfg::Action >*
Group::mutable_action() {
  return &action_;
}

// optional uint32 client_uid_start = 9 [default = 10000];
inline bool Group::has_client_uid_start() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Group::set_has_client_uid_start() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Group::clear_has_client_uid_start() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Group::clear_client_uid_start() {
  client_uid_start_ = 10000u;
  clear_has_client_uid_start();
}
inline ::google::protobuf::uint32 Group::client_uid_start() const {
  return client_uid_start_;
}
inline void Group::set_client_uid_start(::google::protobuf::uint32 value) {
  set_has_client_uid_start();
  client_uid_start_ = value;
}

// optional uint32 client_uid_end = 10 [default = 19999];
inline bool Group::has_client_uid_end() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Group::set_has_client_uid_end() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Group::clear_has_client_uid_end() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Group::clear_client_uid_end() {
  client_uid_end_ = 19999u;
  clear_has_client_uid_end();
}
inline ::google::protobuf::uint32 Group::client_uid_end() const {
  return client_uid_end_;
}
inline void Group::set_client_uid_end(::google::protobuf::uint32 value) {
  set_has_client_uid_end();
  client_uid_end_ = value;
}

// -------------------------------------------------------------------

// Body

// required string uniq_name = 1;
inline bool Body::has_uniq_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Body::set_has_uniq_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Body::clear_has_uniq_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Body::clear_uniq_name() {
  if (uniq_name_ != &::google::protobuf::internal::kEmptyString) {
    uniq_name_->clear();
  }
  clear_has_uniq_name();
}
inline const ::std::string& Body::uniq_name() const {
  return *uniq_name_;
}
inline void Body::set_uniq_name(const ::std::string& value) {
  set_has_uniq_name();
  if (uniq_name_ == &::google::protobuf::internal::kEmptyString) {
    uniq_name_ = new ::std::string;
  }
  uniq_name_->assign(value);
}
inline void Body::set_uniq_name(const char* value) {
  set_has_uniq_name();
  if (uniq_name_ == &::google::protobuf::internal::kEmptyString) {
    uniq_name_ = new ::std::string;
  }
  uniq_name_->assign(value);
}
inline void Body::set_uniq_name(const char* value, size_t size) {
  set_has_uniq_name();
  if (uniq_name_ == &::google::protobuf::internal::kEmptyString) {
    uniq_name_ = new ::std::string;
  }
  uniq_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Body::mutable_uniq_name() {
  set_has_uniq_name();
  if (uniq_name_ == &::google::protobuf::internal::kEmptyString) {
    uniq_name_ = new ::std::string;
  }
  return uniq_name_;
}
inline ::std::string* Body::release_uniq_name() {
  clear_has_uniq_name();
  if (uniq_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uniq_name_;
    uniq_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Body::set_allocated_uniq_name(::std::string* uniq_name) {
  if (uniq_name_ != &::google::protobuf::internal::kEmptyString) {
    delete uniq_name_;
  }
  if (uniq_name) {
    set_has_uniq_name();
    uniq_name_ = uniq_name;
  } else {
    clear_has_uniq_name();
    uniq_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type_name = 2;
inline bool Body::has_type_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Body::set_has_type_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Body::clear_has_type_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Body::clear_type_name() {
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    type_name_->clear();
  }
  clear_has_type_name();
}
inline const ::std::string& Body::type_name() const {
  return *type_name_;
}
inline void Body::set_type_name(const ::std::string& value) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(value);
}
inline void Body::set_type_name(const char* value) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(value);
}
inline void Body::set_type_name(const char* value, size_t size) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Body::mutable_type_name() {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  return type_name_;
}
inline ::std::string* Body::release_type_name() {
  clear_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_name_;
    type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Body::set_allocated_type_name(::std::string* type_name) {
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete type_name_;
  }
  if (type_name) {
    set_has_type_name();
    type_name_ = type_name;
  } else {
    clear_has_type_name();
    type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes text = 3;
inline bool Body::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Body::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Body::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Body::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Body::text() const {
  return *text_;
}
inline void Body::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Body::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Body::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Body::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Body::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Body::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CfgRoot

// repeated bytes proto_path = 1;
inline int CfgRoot::proto_path_size() const {
  return proto_path_.size();
}
inline void CfgRoot::clear_proto_path() {
  proto_path_.Clear();
}
inline const ::std::string& CfgRoot::proto_path(int index) const {
  return proto_path_.Get(index);
}
inline ::std::string* CfgRoot::mutable_proto_path(int index) {
  return proto_path_.Mutable(index);
}
inline void CfgRoot::set_proto_path(int index, const ::std::string& value) {
  proto_path_.Mutable(index)->assign(value);
}
inline void CfgRoot::set_proto_path(int index, const char* value) {
  proto_path_.Mutable(index)->assign(value);
}
inline void CfgRoot::set_proto_path(int index, const void* value, size_t size) {
  proto_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CfgRoot::add_proto_path() {
  return proto_path_.Add();
}
inline void CfgRoot::add_proto_path(const ::std::string& value) {
  proto_path_.Add()->assign(value);
}
inline void CfgRoot::add_proto_path(const char* value) {
  proto_path_.Add()->assign(value);
}
inline void CfgRoot::add_proto_path(const void* value, size_t size) {
  proto_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CfgRoot::proto_path() const {
  return proto_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CfgRoot::mutable_proto_path() {
  return &proto_path_;
}

// repeated .pbcfg.Group group_config = 2;
inline int CfgRoot::group_config_size() const {
  return group_config_.size();
}
inline void CfgRoot::clear_group_config() {
  group_config_.Clear();
}
inline const ::pbcfg::Group& CfgRoot::group_config(int index) const {
  return group_config_.Get(index);
}
inline ::pbcfg::Group* CfgRoot::mutable_group_config(int index) {
  return group_config_.Mutable(index);
}
inline ::pbcfg::Group* CfgRoot::add_group_config() {
  return group_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pbcfg::Group >&
CfgRoot::group_config() const {
  return group_config_;
}
inline ::google::protobuf::RepeatedPtrField< ::pbcfg::Group >*
CfgRoot::mutable_group_config() {
  return &group_config_;
}

// repeated .pbcfg.Body body = 3;
inline int CfgRoot::body_size() const {
  return body_.size();
}
inline void CfgRoot::clear_body() {
  body_.Clear();
}
inline const ::pbcfg::Body& CfgRoot::body(int index) const {
  return body_.Get(index);
}
inline ::pbcfg::Body* CfgRoot::mutable_body(int index) {
  return body_.Mutable(index);
}
inline ::pbcfg::Body* CfgRoot::add_body() {
  return body_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pbcfg::Body >&
CfgRoot::body() const {
  return body_;
}
inline ::google::protobuf::RepeatedPtrField< ::pbcfg::Body >*
CfgRoot::mutable_body() {
  return &body_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbcfg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_robot_2eproto__INCLUDED
