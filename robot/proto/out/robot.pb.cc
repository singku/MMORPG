// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbcfg {

namespace {

const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* CfgRoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CfgRoot_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_robot_2eproto() {
  protobuf_AddDesc_robot_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "robot.proto");
  GOOGLE_CHECK(file != NULL);
  Action_descriptor_ = file->message_type(0);
  static const int Action_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, request_uniq_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, stop_loop_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, min_duration_),
  };
  Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action));
  Client_descriptor_ = file->message_type(1);
  static const int Client_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, uid_),
  };
  Client_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client_descriptor_,
      Client::default_instance_,
      Client_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client));
  Group_descriptor_ = file->message_type(2);
  static const int Group_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, peer_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, max_pkg_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, loop_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, client_uid_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, client_uid_end_),
  };
  Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Group_descriptor_,
      Group::default_instance_,
      Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Group));
  Body_descriptor_ = file->message_type(3);
  static const int Body_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, uniq_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, text_),
  };
  Body_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Body_descriptor_,
      Body::default_instance_,
      Body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Body));
  CfgRoot_descriptor_ = file->message_type(4);
  static const int CfgRoot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgRoot, proto_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgRoot, group_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgRoot, body_),
  };
  CfgRoot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CfgRoot_descriptor_,
      CfgRoot::default_instance_,
      CfgRoot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgRoot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CfgRoot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CfgRoot));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_robot_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client_descriptor_, &Client::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Group_descriptor_, &Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Body_descriptor_, &Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CfgRoot_descriptor_, &CfgRoot::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_robot_2eproto() {
  delete Action::default_instance_;
  delete Action_reflection_;
  delete Client::default_instance_;
  delete Client_reflection_;
  delete Group::default_instance_;
  delete Group_reflection_;
  delete Body::default_instance_;
  delete Body_reflection_;
  delete CfgRoot::default_instance_;
  delete CfgRoot_reflection_;
}

void protobuf_AddDesc_robot_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013robot.proto\022\005pbcfg\"~\n\006Action\022\031\n\021reques"
    "t_uniq_name\030\001 \003(\t\022\020\n\010response\030\002 \003(\t\022\022\n\007t"
    "imeout\030\003 \001(\005:\0011\022\032\n\017stop_loop_count\030\005 \001(\005"
    ":\0010\022\027\n\014min_duration\030\006 \001(\005:\0010\"\025\n\006Client\022\013"
    "\n\003uid\030\001 \002(\r\"\263\001\n\005Group\022\014\n\004name\030\001 \002(\014\022\021\n\tp"
    "eer_addr\030\002 \002(\t\022\023\n\013max_pkg_len\030\004 \002(\005\022\025\n\nl"
    "oop_count\030\007 \001(\005:\0011\022\035\n\006action\030\010 \003(\0132\r.pbc"
    "fg.Action\022\037\n\020client_uid_start\030\t \001(\r:\005100"
    "00\022\035\n\016client_uid_end\030\n \001(\r:\00519999\":\n\004Bod"
    "y\022\021\n\tuniq_name\030\001 \002(\t\022\021\n\ttype_name\030\002 \002(\t\022"
    "\014\n\004text\030\003 \002(\014\"\\\n\007CfgRoot\022\022\n\nproto_path\030\001"
    " \003(\014\022\"\n\014group_config\030\002 \003(\0132\014.pbcfg.Group"
    "\022\031\n\004body\030\003 \003(\0132\013.pbcfg.Body", 507);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot.proto", &protobuf_RegisterTypes);
  Action::default_instance_ = new Action();
  Client::default_instance_ = new Client();
  Group::default_instance_ = new Group();
  Body::default_instance_ = new Body();
  CfgRoot::default_instance_ = new CfgRoot();
  Action::default_instance_->InitAsDefaultInstance();
  Client::default_instance_->InitAsDefaultInstance();
  Group::default_instance_->InitAsDefaultInstance();
  Body::default_instance_->InitAsDefaultInstance();
  CfgRoot::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_robot_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_robot_2eproto {
  StaticDescriptorInitializer_robot_2eproto() {
    protobuf_AddDesc_robot_2eproto();
  }
} static_descriptor_initializer_robot_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Action::kRequestUniqNameFieldNumber;
const int Action::kResponseFieldNumber;
const int Action::kTimeoutFieldNumber;
const int Action::kStopLoopCountFieldNumber;
const int Action::kMinDurationFieldNumber;
#endif  // !_MSC_VER

Action::Action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Action::InitAsDefaultInstance() {
}

Action::Action(const Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 1;
  stop_loop_count_ = 0;
  min_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action::~Action() {
  SharedDtor();
}

void Action::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New() const {
  return new Action;
}

void Action::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    timeout_ = 1;
    stop_loop_count_ = 0;
    min_duration_ = 0;
  }
  request_uniq_name_.Clear();
  response_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string request_uniq_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_uniq_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_request_uniq_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_uniq_name(this->request_uniq_name_size() - 1).data(),
            this->request_uniq_name(this->request_uniq_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_request_uniq_name;
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // repeated string response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response(this->response_size() - 1).data(),
            this->response(this->response_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        if (input->ExpectTag(24)) goto parse_timeout;
        break;
      }

      // optional int32 timeout = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stop_loop_count;
        break;
      }

      // optional int32 stop_loop_count = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_loop_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_loop_count_)));
          set_has_stop_loop_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_min_duration;
        break;
      }

      // optional int32 min_duration = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_duration_)));
          set_has_min_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string request_uniq_name = 1;
  for (int i = 0; i < this->request_uniq_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->request_uniq_name(i).data(), this->request_uniq_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_uniq_name(i), output);
  }

  // repeated string response = 2;
  for (int i = 0; i < this->response_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->response(i).data(), this->response(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->response(i), output);
  }

  // optional int32 timeout = 3 [default = 1];
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeout(), output);
  }

  // optional int32 stop_loop_count = 5 [default = 0];
  if (has_stop_loop_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stop_loop_count(), output);
  }

  // optional int32 min_duration = 6 [default = 0];
  if (has_min_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->min_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string request_uniq_name = 1;
  for (int i = 0; i < this->request_uniq_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_uniq_name(i).data(), this->request_uniq_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->request_uniq_name(i), target);
  }

  // repeated string response = 2;
  for (int i = 0; i < this->response_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response(i).data(), this->response(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->response(i), target);
  }

  // optional int32 timeout = 3 [default = 1];
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeout(), target);
  }

  // optional int32 stop_loop_count = 5 [default = 0];
  if (has_stop_loop_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stop_loop_count(), target);
  }

  // optional int32 min_duration = 6 [default = 0];
  if (has_min_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->min_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 timeout = 3 [default = 1];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // optional int32 stop_loop_count = 5 [default = 0];
    if (has_stop_loop_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stop_loop_count());
    }

    // optional int32 min_duration = 6 [default = 0];
    if (has_min_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_duration());
    }

  }
  // repeated string request_uniq_name = 1;
  total_size += 1 * this->request_uniq_name_size();
  for (int i = 0; i < this->request_uniq_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->request_uniq_name(i));
  }

  // repeated string response = 2;
  total_size += 1 * this->response_size();
  for (int i = 0; i < this->response_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->response(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  request_uniq_name_.MergeFrom(from.request_uniq_name_);
  response_.MergeFrom(from.response_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_stop_loop_count()) {
      set_stop_loop_count(from.stop_loop_count());
    }
    if (from.has_min_duration()) {
      set_min_duration(from.min_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {

  return true;
}

void Action::Swap(Action* other) {
  if (other != this) {
    request_uniq_name_.Swap(&other->request_uniq_name_);
    response_.Swap(&other->response_);
    std::swap(timeout_, other->timeout_);
    std::swap(stop_loop_count_, other->stop_loop_count_);
    std::swap(min_duration_, other->min_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client::kUidFieldNumber;
#endif  // !_MSC_VER

Client::Client()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client::InitAsDefaultInstance() {
}

Client::Client(const Client& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client::~Client() {
  SharedDtor();
}

void Client::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client_descriptor_;
}

const Client& Client::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2eproto();
  return *default_instance_;
}

Client* Client::default_instance_ = NULL;

Client* Client::New() const {
  return new Client;
}

void Client::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client::MergeFrom(const Client& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client::CopyFrom(const Client& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Client::Swap(Client* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client_descriptor_;
  metadata.reflection = Client_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Group::kNameFieldNumber;
const int Group::kPeerAddrFieldNumber;
const int Group::kMaxPkgLenFieldNumber;
const int Group::kLoopCountFieldNumber;
const int Group::kActionFieldNumber;
const int Group::kClientUidStartFieldNumber;
const int Group::kClientUidEndFieldNumber;
#endif  // !_MSC_VER

Group::Group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Group::InitAsDefaultInstance() {
}

Group::Group(const Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Group::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peer_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_pkg_len_ = 0;
  loop_count_ = 1;
  client_uid_start_ = 10000u;
  client_uid_end_ = 19999u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Group::~Group() {
  SharedDtor();
}

void Group::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (peer_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_addr_;
  }
  if (this != default_instance_) {
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2eproto();
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New() const {
  return new Group;
}

void Group::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_peer_addr()) {
      if (peer_addr_ != &::google::protobuf::internal::kEmptyString) {
        peer_addr_->clear();
      }
    }
    max_pkg_len_ = 0;
    loop_count_ = 1;
    client_uid_start_ = 10000u;
    client_uid_end_ = 19999u;
  }
  action_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peer_addr;
        break;
      }

      // required string peer_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_addr().data(), this->peer_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_pkg_len;
        break;
      }

      // required int32 max_pkg_len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_pkg_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pkg_len_)));
          set_has_max_pkg_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_loop_count;
        break;
      }

      // optional int32 loop_count = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loop_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loop_count_)));
          set_has_loop_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_action;
        break;
      }

      // repeated .pbcfg.Action action = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_action;
        if (input->ExpectTag(72)) goto parse_client_uid_start;
        break;
      }

      // optional uint32 client_uid_start = 9 [default = 10000];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_uid_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_uid_start_)));
          set_has_client_uid_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_client_uid_end;
        break;
      }

      // optional uint32 client_uid_end = 10 [default = 19999];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_uid_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_uid_end_)));
          set_has_client_uid_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // required string peer_addr = 2;
  if (has_peer_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_addr().data(), this->peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->peer_addr(), output);
  }

  // required int32 max_pkg_len = 4;
  if (has_max_pkg_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_pkg_len(), output);
  }

  // optional int32 loop_count = 7 [default = 1];
  if (has_loop_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->loop_count(), output);
  }

  // repeated .pbcfg.Action action = 8;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->action(i), output);
  }

  // optional uint32 client_uid_start = 9 [default = 10000];
  if (has_client_uid_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->client_uid_start(), output);
  }

  // optional uint32 client_uid_end = 10 [default = 19999];
  if (has_client_uid_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->client_uid_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required string peer_addr = 2;
  if (has_peer_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_addr().data(), this->peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peer_addr(), target);
  }

  // required int32 max_pkg_len = 4;
  if (has_max_pkg_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_pkg_len(), target);
  }

  // optional int32 loop_count = 7 [default = 1];
  if (has_loop_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->loop_count(), target);
  }

  // repeated .pbcfg.Action action = 8;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->action(i), target);
  }

  // optional uint32 client_uid_start = 9 [default = 10000];
  if (has_client_uid_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->client_uid_start(), target);
  }

  // optional uint32 client_uid_end = 10 [default = 19999];
  if (has_client_uid_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->client_uid_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required string peer_addr = 2;
    if (has_peer_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_addr());
    }

    // required int32 max_pkg_len = 4;
    if (has_max_pkg_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_pkg_len());
    }

    // optional int32 loop_count = 7 [default = 1];
    if (has_loop_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loop_count());
    }

    // optional uint32 client_uid_start = 9 [default = 10000];
    if (has_client_uid_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_uid_start());
    }

    // optional uint32 client_uid_end = 10 [default = 19999];
    if (has_client_uid_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_uid_end());
    }

  }
  // repeated .pbcfg.Action action = 8;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_peer_addr()) {
      set_peer_addr(from.peer_addr());
    }
    if (from.has_max_pkg_len()) {
      set_max_pkg_len(from.max_pkg_len());
    }
    if (from.has_loop_count()) {
      set_loop_count(from.loop_count());
    }
    if (from.has_client_uid_start()) {
      set_client_uid_start(from.client_uid_start());
    }
    if (from.has_client_uid_end()) {
      set_client_uid_end(from.client_uid_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Group::Swap(Group* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(peer_addr_, other->peer_addr_);
    std::swap(max_pkg_len_, other->max_pkg_len_);
    std::swap(loop_count_, other->loop_count_);
    action_.Swap(&other->action_);
    std::swap(client_uid_start_, other->client_uid_start_);
    std::swap(client_uid_end_, other->client_uid_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Body::kUniqNameFieldNumber;
const int Body::kTypeNameFieldNumber;
const int Body::kTextFieldNumber;
#endif  // !_MSC_VER

Body::Body()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Body::InitAsDefaultInstance() {
}

Body::Body(const Body& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Body::SharedCtor() {
  _cached_size_ = 0;
  uniq_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Body::~Body() {
  SharedDtor();
}

void Body::SharedDtor() {
  if (uniq_name_ != &::google::protobuf::internal::kEmptyString) {
    delete uniq_name_;
  }
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete type_name_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Body_descriptor_;
}

const Body& Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2eproto();
  return *default_instance_;
}

Body* Body::default_instance_ = NULL;

Body* Body::New() const {
  return new Body;
}

void Body::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uniq_name()) {
      if (uniq_name_ != &::google::protobuf::internal::kEmptyString) {
        uniq_name_->clear();
      }
    }
    if (has_type_name()) {
      if (type_name_ != &::google::protobuf::internal::kEmptyString) {
        type_name_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uniq_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniq_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniq_name().data(), this->uniq_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_name;
        break;
      }

      // required string type_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // required bytes text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uniq_name = 1;
  if (has_uniq_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniq_name().data(), this->uniq_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uniq_name(), output);
  }

  // required string type_name = 2;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type_name(), output);
  }

  // required bytes text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uniq_name = 1;
  if (has_uniq_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniq_name().data(), this->uniq_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uniq_name(), target);
  }

  // required string type_name = 2;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type_name(), target);
  }

  // required bytes text = 3;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Body::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uniq_name = 1;
    if (has_uniq_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniq_name());
    }

    // required string type_name = 2;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_name());
    }

    // required bytes text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Body* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Body*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniq_name()) {
      set_uniq_name(from.uniq_name());
    }
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Body::Swap(Body* other) {
  if (other != this) {
    std::swap(uniq_name_, other->uniq_name_);
    std::swap(type_name_, other->type_name_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Body_descriptor_;
  metadata.reflection = Body_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CfgRoot::kProtoPathFieldNumber;
const int CfgRoot::kGroupConfigFieldNumber;
const int CfgRoot::kBodyFieldNumber;
#endif  // !_MSC_VER

CfgRoot::CfgRoot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CfgRoot::InitAsDefaultInstance() {
}

CfgRoot::CfgRoot(const CfgRoot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CfgRoot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CfgRoot::~CfgRoot() {
  SharedDtor();
}

void CfgRoot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CfgRoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CfgRoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CfgRoot_descriptor_;
}

const CfgRoot& CfgRoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2eproto();
  return *default_instance_;
}

CfgRoot* CfgRoot::default_instance_ = NULL;

CfgRoot* CfgRoot::New() const {
  return new CfgRoot;
}

void CfgRoot::Clear() {
  proto_path_.Clear();
  group_config_.Clear();
  body_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CfgRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes proto_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_proto_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_proto_path;
        if (input->ExpectTag(18)) goto parse_group_config;
        break;
      }

      // repeated .pbcfg.Group group_config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_config;
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // repeated .pbcfg.Body body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CfgRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes proto_path = 1;
  for (int i = 0; i < this->proto_path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->proto_path(i), output);
  }

  // repeated .pbcfg.Group group_config = 2;
  for (int i = 0; i < this->group_config_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_config(i), output);
  }

  // repeated .pbcfg.Body body = 3;
  for (int i = 0; i < this->body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->body(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CfgRoot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes proto_path = 1;
  for (int i = 0; i < this->proto_path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->proto_path(i), target);
  }

  // repeated .pbcfg.Group group_config = 2;
  for (int i = 0; i < this->group_config_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_config(i), target);
  }

  // repeated .pbcfg.Body body = 3;
  for (int i = 0; i < this->body_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->body(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CfgRoot::ByteSize() const {
  int total_size = 0;

  // repeated bytes proto_path = 1;
  total_size += 1 * this->proto_path_size();
  for (int i = 0; i < this->proto_path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->proto_path(i));
  }

  // repeated .pbcfg.Group group_config = 2;
  total_size += 1 * this->group_config_size();
  for (int i = 0; i < this->group_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_config(i));
  }

  // repeated .pbcfg.Body body = 3;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CfgRoot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CfgRoot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CfgRoot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CfgRoot::MergeFrom(const CfgRoot& from) {
  GOOGLE_CHECK_NE(&from, this);
  proto_path_.MergeFrom(from.proto_path_);
  group_config_.MergeFrom(from.group_config_);
  body_.MergeFrom(from.body_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CfgRoot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CfgRoot::CopyFrom(const CfgRoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CfgRoot::IsInitialized() const {

  for (int i = 0; i < group_config_size(); i++) {
    if (!this->group_config(i).IsInitialized()) return false;
  }
  for (int i = 0; i < body_size(); i++) {
    if (!this->body(i).IsInitialized()) return false;
  }
  return true;
}

void CfgRoot::Swap(CfgRoot* other) {
  if (other != this) {
    proto_path_.Swap(&other->proto_path_);
    group_config_.Swap(&other->group_config_);
    body_.Swap(&other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CfgRoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CfgRoot_descriptor_;
  metadata.reflection = CfgRoot_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbcfg

// @@protoc_insertion_point(global_scope)
